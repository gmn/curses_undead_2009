
/*
 * win_ggl.c
 *
 * - local bindings of the GL function pointers
 */



#include "win_local.h"
#include <windows.h>
#include <assert.h>
#include <float.h>

#ifndef APIENTRY
#define APIENTRY 
#endif

#include "wgl_driver.h"




typedef void (APIENTRY * PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
typedef void (APIENTRY * PFNGLACTIVETEXTUREARBPROC) (GLenum target);
typedef void (APIENTRY * PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum target);
typedef int  (APIENTRY * PFNWGLEXTGETSWAPINTERVALPROC)(void);





int   ( WINAPI * gwglSwapIntervalEXT)( int interval );
int   ( WINAPI * gwglGetSwapIntervalEXT)( void );
BOOL  ( WINAPI * gwglGetDeviceGammaRamp3DFX)( HDC, LPVOID );
BOOL  ( WINAPI * gwglSetDeviceGammaRamp3DFX)( HDC, LPVOID );

int   ( WINAPI * gwglChoosePixelFormat )(HDC, CONST PIXELFORMATDESCRIPTOR *);
int   ( WINAPI * gwglDescribePixelFormat) (HDC, int, UINT, LPPIXELFORMATDESCRIPTOR);
int   ( WINAPI * gwglGetPixelFormat)(HDC);
BOOL  ( WINAPI * gwglSetPixelFormat)(HDC, int, CONST PIXELFORMATDESCRIPTOR *);
BOOL  ( WINAPI * gwglSwapBuffers)(HDC);

BOOL  ( WINAPI * gwglCopyContext)(HGLRC, HGLRC, UINT);
HGLRC ( WINAPI * gwglCreateContext)(HDC);
HGLRC ( WINAPI * gwglCreateLayerContext)(HDC, int);
BOOL  ( WINAPI * gwglDeleteContext)(HGLRC);
HGLRC ( WINAPI * gwglGetCurrentContext)(VOID);
HDC   ( WINAPI * gwglGetCurrentDC)(VOID);
PROC  ( WINAPI * gwglGetProcAddress)(LPCSTR);
BOOL  ( WINAPI * gwglMakeCurrent)(HDC, HGLRC);
BOOL  ( WINAPI * gwglShareLists)(HGLRC, HGLRC);
BOOL  ( WINAPI * gwglUseFontBitmaps)(HDC, DWORD, DWORD, DWORD);

BOOL  ( WINAPI * gwglUseFontOutlines)(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);

BOOL ( WINAPI * gwglDescribeLayerPlane)(HDC, int, int, UINT,
                                            LPLAYERPLANEDESCRIPTOR);
int  ( WINAPI * gwglSetLayerPaletteEntries)(HDC, int, int, int,
                                                CONST COLORREF *);
int  ( WINAPI * gwglGetLayerPaletteEntries)(HDC, int, int, int,
                                                COLORREF *);
BOOL ( WINAPI * gwglRealizeLayerPalette)(HDC, int, BOOL);
BOOL ( WINAPI * gwglSwapLayerBuffers)(HDC, UINT);



void ( APIENTRY * gglAccum )(GLenum op, GLfloat value);
void ( APIENTRY * gglAlphaFunc )(GLenum func, GLclampf ref);
GLboolean ( APIENTRY * gglAreTexturesResident )(GLsizei n, const GLuint *textures, GLboolean *residences);
void ( APIENTRY * gglArrayElement )(GLint i);
void ( APIENTRY * gglBegin )(GLenum mode);
void ( APIENTRY * gglBindTexture )(GLenum target, GLuint texture);
void ( APIENTRY * gglBitmap )(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
void ( APIENTRY * gglBlendFunc )(GLenum sfactor, GLenum dfactor);
void ( APIENTRY * gglCallList )(GLuint list);
void ( APIENTRY * gglCallLists )(GLsizei n, GLenum type, const GLvoid *lists);
void ( APIENTRY * gglClear )(GLbitfield mask);
void ( APIENTRY * gglClearAccum )(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void ( APIENTRY * gglClearColor )(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void ( APIENTRY * gglClearDepth )(GLclampd depth);
void ( APIENTRY * gglClearIndex )(GLfloat c);
void ( APIENTRY * gglClearStencil )(GLint s);
void ( APIENTRY * gglClipPlane )(GLenum plane, const GLdouble *equation);
void ( APIENTRY * gglColor3b )(GLbyte red, GLbyte green, GLbyte blue);
void ( APIENTRY * gglColor3bv )(const GLbyte *v);
void ( APIENTRY * gglColor3d )(GLdouble red, GLdouble green, GLdouble blue);
void ( APIENTRY * gglColor3dv )(const GLdouble *v);
void ( APIENTRY * gglColor3f )(GLfloat red, GLfloat green, GLfloat blue);
void ( APIENTRY * gglColor3fv )(const GLfloat *v);
void ( APIENTRY * gglColor3i )(GLint red, GLint green, GLint blue);
void ( APIENTRY * gglColor3iv )(const GLint *v);
void ( APIENTRY * gglColor3s )(GLshort red, GLshort green, GLshort blue);
void ( APIENTRY * gglColor3sv )(const GLshort *v);
void ( APIENTRY * gglColor3ub )(GLubyte red, GLubyte green, GLubyte blue);
void ( APIENTRY * gglColor3ubv )(const GLubyte *v);
void ( APIENTRY * gglColor3ui )(GLuint red, GLuint green, GLuint blue);
void ( APIENTRY * gglColor3uiv )(const GLuint *v);
void ( APIENTRY * gglColor3us )(GLushort red, GLushort green, GLushort blue);
void ( APIENTRY * gglColor3usv )(const GLushort *v);
void ( APIENTRY * gglColor4b )(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void ( APIENTRY * gglColor4bv )(const GLbyte *v);
void ( APIENTRY * gglColor4d )(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void ( APIENTRY * gglColor4dv )(const GLdouble *v);
void ( APIENTRY * gglColor4f )(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void ( APIENTRY * gglColor4fv )(const GLfloat *v);
void ( APIENTRY * gglColor4i )(GLint red, GLint green, GLint blue, GLint alpha);
void ( APIENTRY * gglColor4iv )(const GLint *v);
void ( APIENTRY * gglColor4s )(GLshort red, GLshort green, GLshort blue, GLshort alpha);
void ( APIENTRY * gglColor4sv )(const GLshort *v);
void ( APIENTRY * gglColor4ub )(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void ( APIENTRY * gglColor4ubv )(const GLubyte *v);
void ( APIENTRY * gglColor4ui )(GLuint red, GLuint green, GLuint blue, GLuint alpha);
void ( APIENTRY * gglColor4uiv )(const GLuint *v);
void ( APIENTRY * gglColor4us )(GLushort red, GLushort green, GLushort blue, GLushort alpha);
void ( APIENTRY * gglColor4usv )(const GLushort *v);
void ( APIENTRY * gglColorMask )(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void ( APIENTRY * gglColorMaterial )(GLenum face, GLenum mode);
void ( APIENTRY * gglColorPointer )(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void ( APIENTRY * gglCopyPixels )(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void ( APIENTRY * gglCopyTexImage1D )(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
void ( APIENTRY * gglCopyTexImage2D )(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void ( APIENTRY * gglCopyTexSubImage1D )(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void ( APIENTRY * gglCopyTexSubImage2D )(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void ( APIENTRY * gglCullFace )(GLenum mode);
void ( APIENTRY * gglDeleteLists )(GLuint list, GLsizei range);
void ( APIENTRY * gglDeleteTextures )(GLsizei n, const GLuint *textures);
void ( APIENTRY * gglDepthFunc )(GLenum func);
void ( APIENTRY * gglDepthMask )(GLboolean flag);
void ( APIENTRY * gglDepthRange )(GLclampd zNear, GLclampd zFar);
void ( APIENTRY * gglDisable )(GLenum cap);
void ( APIENTRY * gglDisableClientState )(GLenum array);
void ( APIENTRY * gglDrawArrays )(GLenum mode, GLint first, GLsizei count);
void ( APIENTRY * gglDrawBuffer )(GLenum mode);
void ( APIENTRY * gglDrawElements )(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
void ( APIENTRY * gglDrawPixels )(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void ( APIENTRY * gglEdgeFlag )(GLboolean flag);
void ( APIENTRY * gglEdgeFlagPointer )(GLsizei stride, const GLvoid *pointer);
void ( APIENTRY * gglEdgeFlagv )(const GLboolean *flag);
void ( APIENTRY * gglEnable )(GLenum cap);
void ( APIENTRY * gglEnableClientState )(GLenum array);
void ( APIENTRY * gglEnd )(void);
void ( APIENTRY * gglEndList )(void);
void ( APIENTRY * gglEvalCoord1d )(GLdouble u);
void ( APIENTRY * gglEvalCoord1dv )(const GLdouble *u);
void ( APIENTRY * gglEvalCoord1f )(GLfloat u);
void ( APIENTRY * gglEvalCoord1fv )(const GLfloat *u);
void ( APIENTRY * gglEvalCoord2d )(GLdouble u, GLdouble v);
void ( APIENTRY * gglEvalCoord2dv )(const GLdouble *u);
void ( APIENTRY * gglEvalCoord2f )(GLfloat u, GLfloat v);
void ( APIENTRY * gglEvalCoord2fv )(const GLfloat *u);
void ( APIENTRY * gglEvalMesh1 )(GLenum mode, GLint i1, GLint i2);
void ( APIENTRY * gglEvalMesh2 )(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void ( APIENTRY * gglEvalPoint1 )(GLint i);
void ( APIENTRY * gglEvalPoint2 )(GLint i, GLint j);
void ( APIENTRY * gglFeedbackBuffer )(GLsizei size, GLenum type, GLfloat *buffer);
void ( APIENTRY * gglFinish )(void);
void ( APIENTRY * gglFlush )(void);
void ( APIENTRY * gglFogf )(GLenum pname, GLfloat param);
void ( APIENTRY * gglFogfv )(GLenum pname, const GLfloat *params);
void ( APIENTRY * gglFogi )(GLenum pname, GLint param);
void ( APIENTRY * gglFogiv )(GLenum pname, const GLint *params);
void ( APIENTRY * gglFrontFace )(GLenum mode);
void ( APIENTRY * gglFrustum )(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLuint ( APIENTRY * gglGenLists )(GLsizei range);
void ( APIENTRY * gglGenTextures )(GLsizei n, GLuint *textures);
void ( APIENTRY * gglGetBooleanv )(GLenum pname, GLboolean *params);
void ( APIENTRY * gglGetClipPlane )(GLenum plane, GLdouble *equation);
void ( APIENTRY * gglGetDoublev )(GLenum pname, GLdouble *params);
GLenum ( APIENTRY * gglGetError )(void);
void ( APIENTRY * gglGetFloatv )(GLenum pname, GLfloat *params);
void ( APIENTRY * gglGetIntegerv )(GLenum pname, GLint *params);
void ( APIENTRY * gglGetLightfv )(GLenum light, GLenum pname, GLfloat *params);
void ( APIENTRY * gglGetLightiv )(GLenum light, GLenum pname, GLint *params);
void ( APIENTRY * gglGetMapdv )(GLenum target, GLenum query, GLdouble *v);
void ( APIENTRY * gglGetMapfv )(GLenum target, GLenum query, GLfloat *v);
void ( APIENTRY * gglGetMapiv )(GLenum target, GLenum query, GLint *v);
void ( APIENTRY * gglGetMaterialfv )(GLenum face, GLenum pname, GLfloat *params);
void ( APIENTRY * gglGetMaterialiv )(GLenum face, GLenum pname, GLint *params);
void ( APIENTRY * gglGetPixelMapfv )(GLenum map, GLfloat *values);
void ( APIENTRY * gglGetPixelMapuiv )(GLenum map, GLuint *values);
void ( APIENTRY * gglGetPixelMapusv )(GLenum map, GLushort *values);
void ( APIENTRY * gglGetPointerv )(GLenum pname, GLvoid* *params);
void ( APIENTRY * gglGetPolygonStipple )(GLubyte *mask);
const GLubyte * ( APIENTRY * gglGetString )(GLenum name);
void ( APIENTRY * gglGetTexEnvfv )(GLenum target, GLenum pname, GLfloat *params);
void ( APIENTRY * gglGetTexEnviv )(GLenum target, GLenum pname, GLint *params);
void ( APIENTRY * gglGetTexGendv )(GLenum coord, GLenum pname, GLdouble *params);
void ( APIENTRY * gglGetTexGenfv )(GLenum coord, GLenum pname, GLfloat *params);
void ( APIENTRY * gglGetTexGeniv )(GLenum coord, GLenum pname, GLint *params);
void ( APIENTRY * gglGetTexImage )(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
void ( APIENTRY * gglGetTexLevelParameterfv )(GLenum target, GLint level, GLenum pname, GLfloat *params);
void ( APIENTRY * gglGetTexLevelParameteriv )(GLenum target, GLint level, GLenum pname, GLint *params);
void ( APIENTRY * gglGetTexParameterfv )(GLenum target, GLenum pname, GLfloat *params);
void ( APIENTRY * gglGetTexParameteriv )(GLenum target, GLenum pname, GLint *params);
void ( APIENTRY * gglHint )(GLenum target, GLenum mode);
void ( APIENTRY * gglIndexMask )(GLuint mask);
void ( APIENTRY * gglIndexPointer )(GLenum type, GLsizei stride, const GLvoid *pointer);
void ( APIENTRY * gglIndexd )(GLdouble c);
void ( APIENTRY * gglIndexdv )(const GLdouble *c);
void ( APIENTRY * gglIndexf )(GLfloat c);
void ( APIENTRY * gglIndexfv )(const GLfloat *c);
void ( APIENTRY * gglIndexi )(GLint c);
void ( APIENTRY * gglIndexiv )(const GLint *c);
void ( APIENTRY * gglIndexs )(GLshort c);
void ( APIENTRY * gglIndexsv )(const GLshort *c);
void ( APIENTRY * gglIndexub )(GLubyte c);
void ( APIENTRY * gglIndexubv )(const GLubyte *c);
void ( APIENTRY * gglInitNames )(void);
void ( APIENTRY * gglInterleavedArrays )(GLenum format, GLsizei stride, const GLvoid *pointer);
GLboolean ( APIENTRY * gglIsEnabled )(GLenum cap);
GLboolean ( APIENTRY * gglIsList )(GLuint list);
GLboolean ( APIENTRY * gglIsTexture )(GLuint texture);
void ( APIENTRY * gglLightModelf )(GLenum pname, GLfloat param);
void ( APIENTRY * gglLightModelfv )(GLenum pname, const GLfloat *params);
void ( APIENTRY * gglLightModeli )(GLenum pname, GLint param);
void ( APIENTRY * gglLightModeliv )(GLenum pname, const GLint *params);
void ( APIENTRY * gglLightf )(GLenum light, GLenum pname, GLfloat param);
void ( APIENTRY * gglLightfv )(GLenum light, GLenum pname, const GLfloat *params);
void ( APIENTRY * gglLighti )(GLenum light, GLenum pname, GLint param);
void ( APIENTRY * gglLightiv )(GLenum light, GLenum pname, const GLint *params);
void ( APIENTRY * gglLineStipple )(GLint factor, GLushort pattern);
void ( APIENTRY * gglLineWidth )(GLfloat width);
void ( APIENTRY * gglListBase )(GLuint base);
void ( APIENTRY * gglLoadIdentity )(void);
void ( APIENTRY * gglLoadMatrixd )(const GLdouble *m);
void ( APIENTRY * gglLoadMatrixf )(const GLfloat *m);
void ( APIENTRY * gglLoadName )(GLuint name);
void ( APIENTRY * gglLogicOp )(GLenum opcode);
void ( APIENTRY * gglMap1d )(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
void ( APIENTRY * gglMap1f )(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
void ( APIENTRY * gglMap2d )(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
void ( APIENTRY * gglMap2f )(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
void ( APIENTRY * gglMapGrid1d )(GLint un, GLdouble u1, GLdouble u2);
void ( APIENTRY * gglMapGrid1f )(GLint un, GLfloat u1, GLfloat u2);
void ( APIENTRY * gglMapGrid2d )(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void ( APIENTRY * gglMapGrid2f )(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void ( APIENTRY * gglMaterialf )(GLenum face, GLenum pname, GLfloat param);
void ( APIENTRY * gglMaterialfv )(GLenum face, GLenum pname, const GLfloat *params);
void ( APIENTRY * gglMateriali )(GLenum face, GLenum pname, GLint param);
void ( APIENTRY * gglMaterialiv )(GLenum face, GLenum pname, const GLint *params);
void ( APIENTRY * gglMatrixMode )(GLenum mode);
void ( APIENTRY * gglMultMatrixd )(const GLdouble *m);
void ( APIENTRY * gglMultMatrixf )(const GLfloat *m);
void ( APIENTRY * gglNewList )(GLuint list, GLenum mode);
void ( APIENTRY * gglNormal3b )(GLbyte nx, GLbyte ny, GLbyte nz);
void ( APIENTRY * gglNormal3bv )(const GLbyte *v);
void ( APIENTRY * gglNormal3d )(GLdouble nx, GLdouble ny, GLdouble nz);
void ( APIENTRY * gglNormal3dv )(const GLdouble *v);
void ( APIENTRY * gglNormal3f )(GLfloat nx, GLfloat ny, GLfloat nz);
void ( APIENTRY * gglNormal3fv )(const GLfloat *v);
void ( APIENTRY * gglNormal3i )(GLint nx, GLint ny, GLint nz);
void ( APIENTRY * gglNormal3iv )(const GLint *v);
void ( APIENTRY * gglNormal3s )(GLshort nx, GLshort ny, GLshort nz);
void ( APIENTRY * gglNormal3sv )(const GLshort *v);
void ( APIENTRY * gglNormalPointer )(GLenum type, GLsizei stride, const GLvoid *pointer);
void ( APIENTRY * gglOrtho )(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void ( APIENTRY * gglPassThrough )(GLfloat token);
void ( APIENTRY * gglPixelMapfv )(GLenum map, GLsizei mapsize, const GLfloat *values);
void ( APIENTRY * gglPixelMapuiv )(GLenum map, GLsizei mapsize, const GLuint *values);
void ( APIENTRY * gglPixelMapusv )(GLenum map, GLsizei mapsize, const GLushort *values);
void ( APIENTRY * gglPixelStoref )(GLenum pname, GLfloat param);
void ( APIENTRY * gglPixelStorei )(GLenum pname, GLint param);
void ( APIENTRY * gglPixelTransferf )(GLenum pname, GLfloat param);
void ( APIENTRY * gglPixelTransferi )(GLenum pname, GLint param);
void ( APIENTRY * gglPixelZoom )(GLfloat xfactor, GLfloat yfactor);
void ( APIENTRY * gglPointSize )(GLfloat size);
void ( APIENTRY * gglPolygonMode )(GLenum face, GLenum mode);
void ( APIENTRY * gglPolygonOffset )(GLfloat factor, GLfloat units);
void ( APIENTRY * gglPolygonStipple )(const GLubyte *mask);
void ( APIENTRY * gglPopAttrib )(void);
void ( APIENTRY * gglPopClientAttrib )(void);
void ( APIENTRY * gglPopMatrix )(void);
void ( APIENTRY * gglPopName )(void);
void ( APIENTRY * gglPrioritizeTextures )(GLsizei n, const GLuint *textures, const GLclampf *priorities);
void ( APIENTRY * gglPushAttrib )(GLbitfield mask);
void ( APIENTRY * gglPushClientAttrib )(GLbitfield mask);
void ( APIENTRY * gglPushMatrix )(void);
void ( APIENTRY * gglPushName )(GLuint name);
void ( APIENTRY * gglRasterPos2d )(GLdouble x, GLdouble y);
void ( APIENTRY * gglRasterPos2dv )(const GLdouble *v);
void ( APIENTRY * gglRasterPos2f )(GLfloat x, GLfloat y);
void ( APIENTRY * gglRasterPos2fv )(const GLfloat *v);
void ( APIENTRY * gglRasterPos2i )(GLint x, GLint y);
void ( APIENTRY * gglRasterPos2iv )(const GLint *v);
void ( APIENTRY * gglRasterPos2s )(GLshort x, GLshort y);
void ( APIENTRY * gglRasterPos2sv )(const GLshort *v);
void ( APIENTRY * gglRasterPos3d )(GLdouble x, GLdouble y, GLdouble z);
void ( APIENTRY * gglRasterPos3dv )(const GLdouble *v);
void ( APIENTRY * gglRasterPos3f )(GLfloat x, GLfloat y, GLfloat z);
void ( APIENTRY * gglRasterPos3fv )(const GLfloat *v);
void ( APIENTRY * gglRasterPos3i )(GLint x, GLint y, GLint z);
void ( APIENTRY * gglRasterPos3iv )(const GLint *v);
void ( APIENTRY * gglRasterPos3s )(GLshort x, GLshort y, GLshort z);
void ( APIENTRY * gglRasterPos3sv )(const GLshort *v);
void ( APIENTRY * gglRasterPos4d )(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void ( APIENTRY * gglRasterPos4dv )(const GLdouble *v);
void ( APIENTRY * gglRasterPos4f )(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void ( APIENTRY * gglRasterPos4fv )(const GLfloat *v);
void ( APIENTRY * gglRasterPos4i )(GLint x, GLint y, GLint z, GLint w);
void ( APIENTRY * gglRasterPos4iv )(const GLint *v);
void ( APIENTRY * gglRasterPos4s )(GLshort x, GLshort y, GLshort z, GLshort w);
void ( APIENTRY * gglRasterPos4sv )(const GLshort *v);
void ( APIENTRY * gglReadBuffer )(GLenum mode);
void ( APIENTRY * gglReadPixels )(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
void ( APIENTRY * gglRectd )(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void ( APIENTRY * gglRectdv )(const GLdouble *v1, const GLdouble *v2);
void ( APIENTRY * gglRectf )(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void ( APIENTRY * gglRectfv )(const GLfloat *v1, const GLfloat *v2);
void ( APIENTRY * gglRecti )(GLint x1, GLint y1, GLint x2, GLint y2);
void ( APIENTRY * gglRectiv )(const GLint *v1, const GLint *v2);
void ( APIENTRY * gglRects )(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void ( APIENTRY * gglRectsv )(const GLshort *v1, const GLshort *v2);
GLint ( APIENTRY * gglRenderMode )(GLenum mode);
void ( APIENTRY * gglRotated )(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void ( APIENTRY * gglRotatef )(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void ( APIENTRY * gglScaled )(GLdouble x, GLdouble y, GLdouble z);
void ( APIENTRY * gglScalef )(GLfloat x, GLfloat y, GLfloat z);
void ( APIENTRY * gglScissor )(GLint x, GLint y, GLsizei width, GLsizei height);
void ( APIENTRY * gglSelectBuffer )(GLsizei size, GLuint *buffer);
void ( APIENTRY * gglShadeModel )(GLenum mode);
void ( APIENTRY * gglStencilFunc )(GLenum func, GLint ref, GLuint mask);
void ( APIENTRY * gglStencilMask )(GLuint mask);
void ( APIENTRY * gglStencilOp )(GLenum fail, GLenum zfail, GLenum zpass);
void ( APIENTRY * gglTexCoord1d )(GLdouble s);
void ( APIENTRY * gglTexCoord1dv )(const GLdouble *v);
void ( APIENTRY * gglTexCoord1f )(GLfloat s);
void ( APIENTRY * gglTexCoord1fv )(const GLfloat *v);
void ( APIENTRY * gglTexCoord1i )(GLint s);
void ( APIENTRY * gglTexCoord1iv )(const GLint *v);
void ( APIENTRY * gglTexCoord1s )(GLshort s);
void ( APIENTRY * gglTexCoord1sv )(const GLshort *v);
void ( APIENTRY * gglTexCoord2d )(GLdouble s, GLdouble t);
void ( APIENTRY * gglTexCoord2dv )(const GLdouble *v);
void ( APIENTRY * gglTexCoord2f )(GLfloat s, GLfloat t);
void ( APIENTRY * gglTexCoord2fv )(const GLfloat *v);
void ( APIENTRY * gglTexCoord2i )(GLint s, GLint t);
void ( APIENTRY * gglTexCoord2iv )(const GLint *v);
void ( APIENTRY * gglTexCoord2s )(GLshort s, GLshort t);
void ( APIENTRY * gglTexCoord2sv )(const GLshort *v);
void ( APIENTRY * gglTexCoord3d )(GLdouble s, GLdouble t, GLdouble r);
void ( APIENTRY * gglTexCoord3dv )(const GLdouble *v);
void ( APIENTRY * gglTexCoord3f )(GLfloat s, GLfloat t, GLfloat r);
void ( APIENTRY * gglTexCoord3fv )(const GLfloat *v);
void ( APIENTRY * gglTexCoord3i )(GLint s, GLint t, GLint r);
void ( APIENTRY * gglTexCoord3iv )(const GLint *v);
void ( APIENTRY * gglTexCoord3s )(GLshort s, GLshort t, GLshort r);
void ( APIENTRY * gglTexCoord3sv )(const GLshort *v);
void ( APIENTRY * gglTexCoord4d )(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void ( APIENTRY * gglTexCoord4dv )(const GLdouble *v);
void ( APIENTRY * gglTexCoord4f )(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void ( APIENTRY * gglTexCoord4fv )(const GLfloat *v);
void ( APIENTRY * gglTexCoord4i )(GLint s, GLint t, GLint r, GLint q);
void ( APIENTRY * gglTexCoord4iv )(const GLint *v);
void ( APIENTRY * gglTexCoord4s )(GLshort s, GLshort t, GLshort r, GLshort q);
void ( APIENTRY * gglTexCoord4sv )(const GLshort *v);
void ( APIENTRY * gglTexCoordPointer )(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void ( APIENTRY * gglTexEnvf )(GLenum target, GLenum pname, GLfloat param);
void ( APIENTRY * gglTexEnvfv )(GLenum target, GLenum pname, const GLfloat *params);
void ( APIENTRY * gglTexEnvi )(GLenum target, GLenum pname, GLint param);
void ( APIENTRY * gglTexEnviv )(GLenum target, GLenum pname, const GLint *params);
void ( APIENTRY * gglTexGend )(GLenum coord, GLenum pname, GLdouble param);
void ( APIENTRY * gglTexGendv )(GLenum coord, GLenum pname, const GLdouble *params);
void ( APIENTRY * gglTexGenf )(GLenum coord, GLenum pname, GLfloat param);
void ( APIENTRY * gglTexGenfv )(GLenum coord, GLenum pname, const GLfloat *params);
void ( APIENTRY * gglTexGeni )(GLenum coord, GLenum pname, GLint param);
void ( APIENTRY * gglTexGeniv )(GLenum coord, GLenum pname, const GLint *params);
void ( APIENTRY * gglTexImage1D )(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void ( APIENTRY * gglTexImage2D )(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void ( APIENTRY * gglTexParameterf )(GLenum target, GLenum pname, GLfloat param);
void ( APIENTRY * gglTexParameterfv )(GLenum target, GLenum pname, const GLfloat *params);
void ( APIENTRY * gglTexParameteri )(GLenum target, GLenum pname, GLint param);
void ( APIENTRY * gglTexParameteriv )(GLenum target, GLenum pname, const GLint *params);
void ( APIENTRY * gglTexSubImage1D )(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
void ( APIENTRY * gglTexSubImage2D )(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void ( APIENTRY * gglTranslated )(GLdouble x, GLdouble y, GLdouble z);
void ( APIENTRY * gglTranslatef )(GLfloat x, GLfloat y, GLfloat z);
void ( APIENTRY * gglVertex2d )(GLdouble x, GLdouble y);
void ( APIENTRY * gglVertex2dv )(const GLdouble *v);
void ( APIENTRY * gglVertex2f )(GLfloat x, GLfloat y);
void ( APIENTRY * gglVertex2fv )(const GLfloat *v);
void ( APIENTRY * gglVertex2i )(GLint x, GLint y);
void ( APIENTRY * gglVertex2iv )(const GLint *v);
void ( APIENTRY * gglVertex2s )(GLshort x, GLshort y);
void ( APIENTRY * gglVertex2sv )(const GLshort *v);
void ( APIENTRY * gglVertex3d )(GLdouble x, GLdouble y, GLdouble z);
void ( APIENTRY * gglVertex3dv )(const GLdouble *v);
void ( APIENTRY * gglVertex3f )(GLfloat x, GLfloat y, GLfloat z);
void ( APIENTRY * gglVertex3fv )(const GLfloat *v);
void ( APIENTRY * gglVertex3i )(GLint x, GLint y, GLint z);
void ( APIENTRY * gglVertex3iv )(const GLint *v);
void ( APIENTRY * gglVertex3s )(GLshort x, GLshort y, GLshort z);
void ( APIENTRY * gglVertex3sv )(const GLshort *v);
void ( APIENTRY * gglVertex4d )(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void ( APIENTRY * gglVertex4dv )(const GLdouble *v);
void ( APIENTRY * gglVertex4f )(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void ( APIENTRY * gglVertex4fv )(const GLfloat *v);
void ( APIENTRY * gglVertex4i )(GLint x, GLint y, GLint z, GLint w);
void ( APIENTRY * gglVertex4iv )(const GLint *v);
void ( APIENTRY * gglVertex4s )(GLshort x, GLshort y, GLshort z, GLshort w);
void ( APIENTRY * gglVertex4sv )(const GLshort *v);
void ( APIENTRY * gglVertexPointer )(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void ( APIENTRY * gglViewport )(GLint x, GLint y, GLsizei width, GLsizei height);


// some extensions
void ( APIENTRY * gglMultiTexCoord2fARB )( GLenum texture, GLfloat s, GLfloat t );
void ( APIENTRY * gglMultiTexCoord2f )( GLenum texture, GLfloat s, GLfloat t );

void ( APIENTRY * gglActiveTextureARB )( GLenum texture );
void ( APIENTRY * gglActiveTexture )( GLenum texture );

void ( APIENTRY * gglClientActiveTextureARB )( GLenum texture );
void ( APIENTRY * gglClientActiveTexture )( GLenum texture );

void ( APIENTRY * gglLockArraysEXT)( GLint, GLint);
void ( APIENTRY * gglUnlockArraysEXT) ( void );


/*
static void ( APIENTRY * dllAccum )(GLenum op, GLfloat value);
static void ( APIENTRY * dllAlphaFunc )(GLenum func, GLclampf ref);
GLboolean ( APIENTRY * dllAreTexturesResident )(GLsizei n, const GLuint *textures, GLboolean *residences);
static void ( APIENTRY * dllArrayElement )(GLint i);
static void ( APIENTRY * dllBegin )(GLenum mode);
static void ( APIENTRY * dllBindTexture )(GLenum target, GLuint texture);
static void ( APIENTRY * dllBitmap )(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
*/




void GGL_Shutdown ( void )
{
	if ( gld.hInstOpenGL )
	{
		FreeLibrary( gld.hInstOpenGL );
	}

	gld.hInstOpenGL = NULL;

	gglAccum                     = NULL;
	gglAlphaFunc                 = NULL;
	gglAreTexturesResident       = NULL;
	gglArrayElement              = NULL;
	gglBegin                     = NULL;
	gglBindTexture               = NULL;
	gglBitmap                    = NULL;
	gglBlendFunc                 = NULL;
	gglCallList                  = NULL;
	gglCallLists                 = NULL;
	gglClear                     = NULL;
	gglClearAccum                = NULL;
	gglClearColor                = NULL;
	gglClearDepth                = NULL;
	gglClearIndex                = NULL;
	gglClearStencil              = NULL;
	gglClipPlane                 = NULL;
	gglColor3b                   = NULL;
	gglColor3bv                  = NULL;
	gglColor3d                   = NULL;
	gglColor3dv                  = NULL;
	gglColor3f                   = NULL;
	gglColor3fv                  = NULL;
	gglColor3i                   = NULL;
	gglColor3iv                  = NULL;
	gglColor3s                   = NULL;
	gglColor3sv                  = NULL;
	gglColor3ub                  = NULL;
	gglColor3ubv                 = NULL;
	gglColor3ui                  = NULL;
	gglColor3uiv                 = NULL;
	gglColor3us                  = NULL;
	gglColor3usv                 = NULL;
	gglColor4b                   = NULL;
	gglColor4bv                  = NULL;
	gglColor4d                   = NULL;
	gglColor4dv                  = NULL;
	gglColor4f                   = NULL;
	gglColor4fv                  = NULL;
	gglColor4i                   = NULL;
	gglColor4iv                  = NULL;
	gglColor4s                   = NULL;
	gglColor4sv                  = NULL;
	gglColor4ub                  = NULL;
	gglColor4ubv                 = NULL;
	gglColor4ui                  = NULL;
	gglColor4uiv                 = NULL;
	gglColor4us                  = NULL;
	gglColor4usv                 = NULL;
	gglColorMask                 = NULL;
	gglColorMaterial             = NULL;
	gglColorPointer              = NULL;
	gglCopyPixels                = NULL;
	gglCopyTexImage1D            = NULL;
	gglCopyTexImage2D            = NULL;
	gglCopyTexSubImage1D         = NULL;
	gglCopyTexSubImage2D         = NULL;
	gglCullFace                  = NULL;
	gglDeleteLists               = NULL;
	gglDeleteTextures            = NULL;
	gglDepthFunc                 = NULL;
	gglDepthMask                 = NULL;
	gglDepthRange                = NULL;
	gglDisable                   = NULL;
	gglDisableClientState        = NULL;
	gglDrawArrays                = NULL;
	gglDrawBuffer                = NULL;
	gglDrawElements              = NULL;
	gglDrawPixels                = NULL;
	gglEdgeFlag                  = NULL;
	gglEdgeFlagPointer           = NULL;
	gglEdgeFlagv                 = NULL;
	gglEnable                    = NULL;
	gglEnableClientState         = NULL;
	gglEnd                       = NULL;
	gglEndList                   = NULL;
	gglEvalCoord1d               = NULL;
	gglEvalCoord1dv              = NULL;
	gglEvalCoord1f               = NULL;
	gglEvalCoord1fv              = NULL;
	gglEvalCoord2d               = NULL;
	gglEvalCoord2dv              = NULL;
	gglEvalCoord2f               = NULL;
	gglEvalCoord2fv              = NULL;
	gglEvalMesh1                 = NULL;
	gglEvalMesh2                 = NULL;
	gglEvalPoint1                = NULL;
	gglEvalPoint2                = NULL;
	gglFeedbackBuffer            = NULL;
	gglFinish                    = NULL;
	gglFlush                     = NULL;
	gglFogf                      = NULL;
	gglFogfv                     = NULL;
	gglFogi                      = NULL;
	gglFogiv                     = NULL;
	gglFrontFace                 = NULL;
	gglFrustum                   = NULL;
	gglGenLists                  = NULL;
	gglGenTextures               = NULL;
	gglGetBooleanv               = NULL;
	gglGetClipPlane              = NULL;
	gglGetDoublev                = NULL;
	gglGetError                  = NULL;
	gglGetFloatv                 = NULL;
	gglGetIntegerv               = NULL;
	gglGetLightfv                = NULL;
	gglGetLightiv                = NULL;
	gglGetMapdv                  = NULL;
	gglGetMapfv                  = NULL;
	gglGetMapiv                  = NULL;
	gglGetMaterialfv             = NULL;
	gglGetMaterialiv             = NULL;
	gglGetPixelMapfv             = NULL;
	gglGetPixelMapuiv            = NULL;
	gglGetPixelMapusv            = NULL;
	gglGetPointerv               = NULL;
	gglGetPolygonStipple         = NULL;
	gglGetString                 = NULL;
	gglGetTexEnvfv               = NULL;
	gglGetTexEnviv               = NULL;
	gglGetTexGendv               = NULL;
	gglGetTexGenfv               = NULL;
	gglGetTexGeniv               = NULL;
	gglGetTexImage               = NULL;
	gglGetTexLevelParameterfv    = NULL;
	gglGetTexLevelParameteriv    = NULL;
	gglGetTexParameterfv         = NULL;
	gglGetTexParameteriv         = NULL;
	gglHint                      = NULL;
	gglIndexMask                 = NULL;
	gglIndexPointer              = NULL;
	gglIndexd                    = NULL;
	gglIndexdv                   = NULL;
	gglIndexf                    = NULL;
	gglIndexfv                   = NULL;
	gglIndexi                    = NULL;
	gglIndexiv                   = NULL;
	gglIndexs                    = NULL;
	gglIndexsv                   = NULL;
	gglIndexub                   = NULL;
	gglIndexubv                  = NULL;
	gglInitNames                 = NULL;
	gglInterleavedArrays         = NULL;
	gglIsEnabled                 = NULL;
	gglIsList                    = NULL;
	gglIsTexture                 = NULL;
	gglLightModelf               = NULL;
	gglLightModelfv              = NULL;
	gglLightModeli               = NULL;
	gglLightModeliv              = NULL;
	gglLightf                    = NULL;
	gglLightfv                   = NULL;
	gglLighti                    = NULL;
	gglLightiv                   = NULL;
	gglLineStipple               = NULL;
	gglLineWidth                 = NULL;
	gglListBase                  = NULL;
	gglLoadIdentity              = NULL;
	gglLoadMatrixd               = NULL;
	gglLoadMatrixf               = NULL;
	gglLoadName                  = NULL;
	gglLogicOp                   = NULL;
	gglMap1d                     = NULL;
	gglMap1f                     = NULL;
	gglMap2d                     = NULL;
	gglMap2f                     = NULL;
	gglMapGrid1d                 = NULL;
	gglMapGrid1f                 = NULL;
	gglMapGrid2d                 = NULL;
	gglMapGrid2f                 = NULL;
	gglMaterialf                 = NULL;
	gglMaterialfv                = NULL;
	gglMateriali                 = NULL;
	gglMaterialiv                = NULL;
	gglMatrixMode                = NULL;
	gglMultMatrixd               = NULL;
	gglMultMatrixf               = NULL;
	gglNewList                   = NULL;
	gglNormal3b                  = NULL;
	gglNormal3bv                 = NULL;
	gglNormal3d                  = NULL;
	gglNormal3dv                 = NULL;
	gglNormal3f                  = NULL;
	gglNormal3fv                 = NULL;
	gglNormal3i                  = NULL;
	gglNormal3iv                 = NULL;
	gglNormal3s                  = NULL;
	gglNormal3sv                 = NULL;
	gglNormalPointer             = NULL;
	gglOrtho                     = NULL;
	gglPassThrough               = NULL;
	gglPixelMapfv                = NULL;
	gglPixelMapuiv               = NULL;
	gglPixelMapusv               = NULL;
	gglPixelStoref               = NULL;
	gglPixelStorei               = NULL;
	gglPixelTransferf            = NULL;
	gglPixelTransferi            = NULL;
	gglPixelZoom                 = NULL;
	gglPointSize                 = NULL;
	gglPolygonMode               = NULL;
	gglPolygonOffset             = NULL;
	gglPolygonStipple            = NULL;
	gglPopAttrib                 = NULL;
	gglPopClientAttrib           = NULL;
	gglPopMatrix                 = NULL;
	gglPopName                   = NULL;
	gglPrioritizeTextures        = NULL;
	gglPushAttrib                = NULL;
	gglPushClientAttrib          = NULL;
	gglPushMatrix                = NULL;
	gglPushName                  = NULL;
	gglRasterPos2d               = NULL;
	gglRasterPos2dv              = NULL;
	gglRasterPos2f               = NULL;
	gglRasterPos2fv              = NULL;
	gglRasterPos2i               = NULL;
	gglRasterPos2iv              = NULL;
	gglRasterPos2s               = NULL;
	gglRasterPos2sv              = NULL;
	gglRasterPos3d               = NULL;
	gglRasterPos3dv              = NULL;
	gglRasterPos3f               = NULL;
	gglRasterPos3fv              = NULL;
	gglRasterPos3i               = NULL;
	gglRasterPos3iv              = NULL;
	gglRasterPos3s               = NULL;
	gglRasterPos3sv              = NULL;
	gglRasterPos4d               = NULL;
	gglRasterPos4dv              = NULL;
	gglRasterPos4f               = NULL;
	gglRasterPos4fv              = NULL;
	gglRasterPos4i               = NULL;
	gglRasterPos4iv              = NULL;
	gglRasterPos4s               = NULL;
	gglRasterPos4sv              = NULL;
	gglReadBuffer                = NULL;
	gglReadPixels                = NULL;
	gglRectd                     = NULL;
	gglRectdv                    = NULL;
	gglRectf                     = NULL;
	gglRectfv                    = NULL;
	gglRecti                     = NULL;
	gglRectiv                    = NULL;
	gglRects                     = NULL;
	gglRectsv                    = NULL;
	gglRenderMode                = NULL;
	gglRotated                   = NULL;
	gglRotatef                   = NULL;
	gglScaled                    = NULL;
	gglScalef                    = NULL;
	gglScissor                   = NULL;
	gglSelectBuffer              = NULL;
	gglShadeModel                = NULL;
	gglStencilFunc               = NULL;
	gglStencilMask               = NULL;
	gglStencilOp                 = NULL;
	gglTexCoord1d                = NULL;
	gglTexCoord1dv               = NULL;
	gglTexCoord1f                = NULL;
	gglTexCoord1fv               = NULL;
	gglTexCoord1i                = NULL;
	gglTexCoord1iv               = NULL;
	gglTexCoord1s                = NULL;
	gglTexCoord1sv               = NULL;
	gglTexCoord2d                = NULL;
	gglTexCoord2dv               = NULL;
	gglTexCoord2f                = NULL;
	gglTexCoord2fv               = NULL;
	gglTexCoord2i                = NULL;
	gglTexCoord2iv               = NULL;
	gglTexCoord2s                = NULL;
	gglTexCoord2sv               = NULL;
	gglTexCoord3d                = NULL;
	gglTexCoord3dv               = NULL;
	gglTexCoord3f                = NULL;
	gglTexCoord3fv               = NULL;
	gglTexCoord3i                = NULL;
	gglTexCoord3iv               = NULL;
	gglTexCoord3s                = NULL;
	gglTexCoord3sv               = NULL;
	gglTexCoord4d                = NULL;
	gglTexCoord4dv               = NULL;
	gglTexCoord4f                = NULL;
	gglTexCoord4fv               = NULL;
	gglTexCoord4i                = NULL;
	gglTexCoord4iv               = NULL;
	gglTexCoord4s                = NULL;
	gglTexCoord4sv               = NULL;
	gglTexCoordPointer           = NULL;
	gglTexEnvf                   = NULL;
	gglTexEnvfv                  = NULL;
	gglTexEnvi                   = NULL;
	gglTexEnviv                  = NULL;
	gglTexGend                   = NULL;
	gglTexGendv                  = NULL;
	gglTexGenf                   = NULL;
	gglTexGenfv                  = NULL;
	gglTexGeni                   = NULL;
	gglTexGeniv                  = NULL;
	gglTexImage1D                = NULL;
	gglTexImage2D                = NULL;
	gglTexParameterf             = NULL;
	gglTexParameterfv            = NULL;
	gglTexParameteri             = NULL;
	gglTexParameteriv            = NULL;
	gglTexSubImage1D             = NULL;
	gglTexSubImage2D             = NULL;
	gglTranslated                = NULL;
	gglTranslatef                = NULL;
	gglVertex2d                  = NULL;
	gglVertex2dv                 = NULL;
	gglVertex2f                  = NULL;
	gglVertex2fv                 = NULL;
	gglVertex2i                  = NULL;
	gglVertex2iv                 = NULL;
	gglVertex2s                  = NULL;
	gglVertex2sv                 = NULL;
	gglVertex3d                  = NULL;
	gglVertex3dv                 = NULL;
	gglVertex3f                  = NULL;
	gglVertex3fv                 = NULL;
	gglVertex3i                  = NULL;
	gglVertex3iv                 = NULL;
	gglVertex3s                  = NULL;
	gglVertex3sv                 = NULL;
	gglVertex4d                  = NULL;
	gglVertex4dv                 = NULL;
	gglVertex4f                  = NULL;
	gglVertex4fv                 = NULL;
	gglVertex4i                  = NULL;
	gglVertex4iv                 = NULL;
	gglVertex4s                  = NULL;
	gglVertex4sv                 = NULL;
	gglVertexPointer             = NULL;
	gglViewport                  = NULL;

	gwglCopyContext              = NULL;
	gwglCreateContext            = NULL;
	gwglCreateLayerContext       = NULL;
	gwglDeleteContext            = NULL;
	gwglDescribeLayerPlane       = NULL;
	gwglGetCurrentContext        = NULL;
	gwglGetCurrentDC             = NULL;
	gwglGetLayerPaletteEntries   = NULL;
	gwglGetProcAddress           = NULL;
	gwglMakeCurrent              = NULL;
	gwglRealizeLayerPalette      = NULL;
	gwglSetLayerPaletteEntries   = NULL;
	gwglShareLists               = NULL;
	gwglSwapLayerBuffers         = NULL;
	gwglUseFontBitmaps           = NULL;
	gwglUseFontOutlines          = NULL;

	gwglChoosePixelFormat        = NULL;
	gwglDescribePixelFormat      = NULL;
	gwglGetPixelFormat           = NULL;
	gwglSetPixelFormat           = NULL;
	gwglSwapBuffers              = NULL;
}



#define GPA( a ) GetProcAddress( gld.hInstOpenGL, a )

// Get Entry Point
#define GEP( n ) (*(FARPROC*)&g##n) = (FARPROC) GPA( #n )


gbool GGL_Init ( const gwchar_t *dllname )
{

    assert( gld.hInstOpenGL == 0 );

	if ( ( gld.hInstOpenGL = LoadLibrary( (wchar_t *)dllname ) ) == 0 )
	{
		return gfalse;
	}

	GEP( glAccum );
    GEP( glAlphaFunc );
    GEP( glAreTexturesResident );
    GEP( glArrayElement );
    GEP( glBegin );
    GEP( glBindTexture );
    GEP( glBitmap );
    GEP( glBlendFunc );
    GEP( glCallList );
    GEP( glCallLists );
    GEP( glClear );
    GEP( glClearAccum );
    GEP( glClearColor );
    GEP( glClearDepth );
    GEP( glClearIndex );
    GEP( glClearStencil );
    GEP( glClipPlane );
    GEP( glColor3b );
    GEP( glColor3bv );
    GEP( glColor3d );
    GEP( glColor3dv );
    GEP( glColor3f );
    GEP( glColor3fv );
    GEP( glColor3i );
    GEP( glColor3iv );
    GEP( glColor3s );
    GEP( glColor3sv );
    GEP( glColor3ub );
    GEP( glColor3ubv );
    GEP( glColor3ui );
    GEP( glColor3uiv );
    GEP( glColor3us );
    GEP( glColor3usv );
    GEP( glColor4b );
    GEP( glColor4bv );
    GEP( glColor4d );
    GEP( glColor4dv );
    GEP( glColor4f );
    GEP( glColor4fv );
    GEP( glColor4i );
    GEP( glColor4iv );
    GEP( glColor4s );
    GEP( glColor4sv );
    GEP( glColor4ub );
    GEP( glColor4ubv );
    GEP( glColor4ui );
    GEP( glColor4uiv );
    GEP( glColor4us );
    GEP( glColor4usv );

/*
	gglAccum                      = GPA( "glAccum" );
	gglAlphaFunc                  = GPA( "glAlphaFunc" );
	gglAreTexturesResident        = GPA( "glAreTexturesResident" );
	gglArrayElement               = GPA( "glArrayElement" );
	gglBegin                      = GPA( "glBegin" );
	gglBindTexture                = GPA( "glBindTexture" );
	gglBitmap                     = GPA( "glBitmap" );
	gglBlendFunc                  = GPA( "glBlendFunc" );
	gglCallList                   = GPA( "glCallList" );
	gglCallLists                  = GPA( "glCallLists" );
	gglClear                      = GPA( "glClear" );
	gglClearAccum                 = GPA( "glClearAccum" );
	gglClearColor                 = GPA( "glClearColor" );
	gglClearDepth                 = GPA( "glClearDepth" );
	gglClearIndex                 = GPA( "glClearIndex" );
	gglClearStencil               = GPA( "glClearStencil" );
	gglClipPlane                  = GPA( "glClipPlane" );
	gglColor3b                    = GPA( "glColor3b" );
	gglColor3bv                   = GPA( "glColor3bv" );
	gglColor3d                    = GPA( "glColor3d" );
	gglColor3dv                   = GPA( "glColor3dv" );
	gglColor3f                    = GPA( "glColor3f" );
	gglColor3fv                   = GPA( "glColor3fv" );
	gglColor3i                    = GPA( "glColor3i" );
	gglColor3iv                   = GPA( "glColor3iv" );
	gglColor3s                    = GPA( "glColor3s" );
	gglColor3sv                   = GPA( "glColor3sv" );
	gglColor3ub                   = GPA( "glColor3ub" );
	gglColor3ubv                  = GPA( "glColor3ubv" );
	gglColor3ui                   = GPA( "glColor3ui" );
	gglColor3uiv                  = GPA( "glColor3uiv" );
	gglColor3us                   = GPA( "glColor3us" );
	gglColor3usv                  = GPA( "glColor3usv" );
	gglColor4b                    = GPA( "glColor4b" );
	gglColor4bv                   = GPA( "glColor4bv" );
	gglColor4d                    = GPA( "glColor4d" );
	gglColor4dv                   = GPA( "glColor4dv" );
	gglColor4f                    = GPA( "glColor4f" );
	gglColor4fv                   = GPA( "glColor4fv" );
	gglColor4i                    = GPA( "glColor4i" );
	gglColor4iv                   = GPA( "glColor4iv" );
	gglColor4s                    = GPA( "glColor4s" );
	gglColor4sv                   = GPA( "glColor4sv" );
	gglColor4ub                   = GPA( "glColor4ub" );
	gglColor4ubv                  = GPA( "glColor4ubv" );
	gglColor4ui                   = GPA( "glColor4ui" );
	gglColor4uiv                  = GPA( "glColor4uiv" );
	gglColor4us                   = GPA( "glColor4us" );
	gglColor4usv                  = GPA( "glColor4usv" );
    */

    GEP( glColorMask );
    GEP( glColorMaterial );
    GEP( glColorPointer );
    GEP( glCopyPixels );
    GEP( glCopyTexImage1D );
    GEP( glCopyTexImage2D );
    GEP( glCopyTexSubImage1D );
    GEP( glCopyTexSubImage2D );
    GEP( glCullFace );
    GEP( glDeleteLists );
    GEP( glDeleteTextures );
    GEP( glDepthFunc );
    GEP( glDepthMask );
    GEP( glDepthRange );
    GEP( glDisable );
    GEP( glDisableClientState );
    GEP( glDrawArrays );
    GEP( glDrawBuffer );
    GEP( glDrawElements );
    GEP( glDrawPixels );
    GEP( glEdgeFlag );
    GEP( glEdgeFlagPointer );
    GEP( glEdgeFlagv );
    GEP( glEnable );
    GEP( glEnableClientState );
    GEP( glEnd );
    GEP( glEndList );
    GEP( glEvalCoord1d );
    GEP( glEvalCoord1dv );
    GEP( glEvalCoord1f );
    GEP( glEvalCoord1fv );
    GEP( glEvalCoord2d );
    GEP( glEvalCoord2dv );
    GEP( glEvalCoord2f );
    GEP( glEvalCoord2fv );
    GEP( glEvalMesh1 );
    GEP( glEvalMesh2 );
    GEP( glEvalPoint1 );
    GEP( glEvalPoint2 );

    /*
	gglColorMask                  = GPA( "glColorMask" );
	gglColorMaterial              = GPA( "glColorMaterial" );
	gglColorPointer               = GPA( "glColorPointer" );
	gglCopyPixels                 = GPA( "glCopyPixels" );
	gglCopyTexImage1D             = GPA( "glCopyTexImage1D" );
	gglCopyTexImage2D             = GPA( "glCopyTexImage2D" );
	gglCopyTexSubImage1D          = GPA( "glCopyTexSubImage1D" );
	gglCopyTexSubImage2D          = GPA( "glCopyTexSubImage2D" );
	gglCullFace                   = GPA( "glCullFace" );
	gglDeleteLists                = GPA( "glDeleteLists" );
	gglDeleteTextures             = GPA( "glDeleteTextures" );
	gglDepthFunc                  = GPA( "glDepthFunc" );
	gglDepthMask                  = GPA( "glDepthMask" );
	gglDepthRange                 = GPA( "glDepthRange" );
	gglDisable                    = GPA( "glDisable" );
	gglDisableClientState         = GPA( "glDisableClientState" );
	gglDrawArrays                 = GPA( "glDrawArrays" );
	gglDrawBuffer                 = GPA( "glDrawBuffer" );
	gglDrawElements               = GPA( "glDrawElements" );
	gglDrawPixels                 = GPA( "glDrawPixels" );
	gglEdgeFlag                   = GPA( "glEdgeFlag" );
	gglEdgeFlagPointer            = GPA( "glEdgeFlagPointer" );
	gglEdgeFlagv                  = GPA( "glEdgeFlagv" );
	gglEnable                                        = GPA( "glEnable" );
	gglEnableClientState                  = GPA( "glEnableClientState" );
	gglEnd                                              = GPA( "glEnd" );
	gglEndList                                      = GPA( "glEndList" );
	gglEvalCoord1d				 				 = GPA( "glEvalCoord1d" );
	gglEvalCoord1dv                             = GPA( "glEvalCoord1dv" );
	gglEvalCoord1f                              = GPA( "glEvalCoord1f" );
	gglEvalCoord1fv                            = GPA( "glEvalCoord1fv" );
	gglEvalCoord2d                              = GPA( "glEvalCoord2d" );
	gglEvalCoord2dv                            = GPA( "glEvalCoord2dv" );
	gglEvalCoord2f                              = GPA( "glEvalCoord2f" );
	gglEvalCoord2fv                            = GPA( "glEvalCoord2fv" );
	gglEvalMesh1                                  = GPA( "glEvalMesh1" );
	gglEvalMesh2                                  = GPA( "glEvalMesh2" );
	gglEvalPoint1                                = GPA( "glEvalPoint1" );
	gglEvalPoint2                                = GPA( "glEvalPoint2" );
    */

    GEP( glFeedbackBuffer );
    GEP( glFinish );
    GEP( glFlush );
    GEP( glFogf );
    GEP( glFogfv );
    GEP( glFogi );
    GEP( glFogiv );
    GEP( glFrontFace );
    GEP( glFrustum );
    GEP( glGenLists );
    GEP( glGenTextures );
    GEP( glGetBooleanv );
    GEP( glGetClipPlane );
    GEP( glGetDoublev );
    GEP( glGetError );
    GEP( glGetFloatv );
    GEP( glGetIntegerv );
    GEP( glGetLightfv );
    GEP( glGetMapdv );
    GEP( glGetMapfv );
    GEP( glGetMapiv );
    GEP( glGetMaterialfv );
    GEP( glGetMaterialiv );
    GEP( glGetPixelMapfv );
    GEP( glGetPixelMapuiv );
    GEP( glGetPixelMapusv );
    GEP( glGetPointerv );
    GEP( glGetPolygonStipple );
    GEP( glGetString );
    GEP( glGetTexEnvfv );
    GEP( glGetTexEnviv );
    GEP( glGetTexGendv );
    GEP( glGetTexGenfv );
    GEP( glGetTexGeniv );
    GEP( glGetTexImage );
    GEP( glGetTexParameterfv );
    GEP( glGetTexParameteriv );
    GEP( glHint );




    /*
    gglFeedbackBuffer                        = GPA( "glFeedbackBuffer" );
	gglFinish                                        = GPA( "glFinish" );
	gglFlush                                          = GPA( "glFlush" );
	gglFogf                                            = GPA( "glFogf" );
	gglFogfv                                          = GPA( "glFogfv" );
	gglFogi                                            = GPA( "glFogi" );
	gglFogiv                                          = GPA( "glFogiv" );
	gglFrontFace                                  = GPA( "glFrontFace" );
	gglFrustum                                      = GPA( "glFrustum" );
	gglGenLists                                    = ( GLuint (__stdcall * )(int) ) GPA( "glGenLists" );
	gglGenTextures                              = GPA( "glGenTextures" );
	gglGetBooleanv                              = GPA( "glGetBooleanv" );
	gglGetClipPlane                            = GPA( "glGetClipPlane" );
	gglGetDoublev                                = GPA( "glGetDoublev" );
	gglGetError                                    = ( GLenum (__stdcall * )(void) ) GPA( "glGetError" );
	gglGetFloatv                                  = GPA( "glGetFloatv" );
	gglGetIntegerv                              = GPA( "glGetIntegerv" );
	gglGetLightfv                                = GPA( "glGetLightfv" );
	gglGetLightiv                                = GPA( "glGetLightiv" );
	gglGetMapdv                                    = GPA( "glGetMapdv" );
	gglGetMapfv                                    = GPA( "glGetMapfv" );
	gglGetMapiv                                    = GPA( "glGetMapiv" );
	gglGetMaterialfv                          = GPA( "glGetMaterialfv" );
	gglGetMaterialiv                          = GPA( "glGetMaterialiv" );
	gglGetPixelMapfv                          = GPA( "glGetPixelMapfv" );
	gglGetPixelMapuiv                        = GPA( "glGetPixelMapuiv" );
	gglGetPixelMapusv                        = GPA( "glGetPixelMapusv" );
	gglGetPointerv                              = GPA( "glGetPointerv" );
	gglGetPolygonStipple                  = GPA( "glGetPolygonStipple" );
	gglGetString                                  = GPA( "glGetString" );
	gglGetTexEnvfv                              = GPA( "glGetTexEnvfv" );
	gglGetTexEnviv                              = GPA( "glGetTexEnviv" );
	gglGetTexGendv                              = GPA( "glGetTexGendv" );
	gglGetTexGenfv                              = GPA( "glGetTexGenfv" );
	gglGetTexGeniv                              = GPA( "glGetTexGeniv" );
	gglGetTexImage                              = GPA( "glGetTexImage" );
	gglGetTexParameterfv                  = GPA( "glGetTexParameterfv" );
	gglGetTexParameteriv                  = GPA( "glGetTexParameteriv" );
	gglHint                                            = GPA( "glHint" );
    */

    GEP( glIndexMask );
    GEP( glIndexPointer );
    GEP( glIndexd );
    GEP( glIndexdv );
    GEP( glIndexf );
    GEP( glIndexfv );
    GEP( glIndexi );
    GEP( glIndexiv );
    GEP( glIndexs );
    GEP( glIndexsv );
    GEP( glIndexub );
    GEP( glIndexubv );
    GEP( glInitNames );
    GEP( glInterleavedArrays );
    GEP( glIsEnabled );
    GEP( glIsList );
    GEP( glIsTexture );
    GEP( glLightModelf );
    GEP( glLightModelfv );
    GEP( glLightModeli );
    GEP( glLightModeliv );
    GEP( glLightf );
    GEP( glLightfv );
    GEP( glLighti );
    GEP( glLightiv );
    GEP( glLineStipple );
    GEP( glLineWidth );
    GEP( glListBase );
    GEP( glLoadIdentity );
    GEP( glLoadMatrixd );
    GEP( glLoadMatrixf );
    GEP( glLoadName );
    GEP( glLogicOp );
    GEP( glMap1d );
    GEP( glMap1f );
    GEP( glMap2d );
    GEP( glMap2f );
    GEP( glMapGrid1d );
    GEP( glMapGrid1f );
    GEP( glMapGrid2d );
    GEP( glMapGrid2f );
    GEP( glMaterialf );
    GEP( glMaterialfv );
    GEP( glMateriali );
    GEP( glMaterialiv );

    /*
	gglIndexMask                                  = GPA( "glIndexMask" );
	gglIndexPointer                            = GPA( "glIndexPointer" );
	gglIndexd                                        = GPA( "glIndexd" );
	gglIndexdv                                      = GPA( "glIndexdv" );
	gglIndexf                                        = GPA( "glIndexf" );
	gglIndexfv                                      = GPA( "glIndexfv" );
	gglIndexi                                        = GPA( "glIndexi" );
	gglIndexiv                                      = GPA( "glIndexiv" );
	gglIndexs                                        = GPA( "glIndexs" );
	gglIndexsv                                      = GPA( "glIndexsv" );
	gglIndexub                                      = GPA( "glIndexub" );
	gglIndexubv                                    = GPA( "glIndexubv" );
	gglInitNames                                  = GPA( "glInitNames" );
	gglInterleavedArrays                  = GPA( "glInterleavedArrays" );
	gglIsEnabled                                  = GPA( "glIsEnabled" );
	gglIsList                                        = GPA( "glIsList" );
	gglIsTexture                                  = GPA( "glIsTexture" );
	gglLightModelf                              = GPA( "glLightModelf" );
	gglLightModelfv                            = GPA( "glLightModelfv" );
	gglLightModeli                              = GPA( "glLightModeli" );
	gglLightModeliv                            = GPA( "glLightModeliv" );
	gglLightf                                        = GPA( "glLightf" );
	gglLightfv                                      = GPA( "glLightfv" );
	gglLighti                                        = GPA( "glLighti" );
	gglLightiv                                      = GPA( "glLightiv" );
	gglLineStipple                              = GPA( "glLineStipple" );
	gglLineWidth                                  = GPA( "glLineWidth" );
	gglListBase                                    = GPA( "glListBase" );
	gglLoadIdentity                            = GPA( "glLoadIdentity" );
	gglLoadMatrixd                              = GPA( "glLoadMatrixd" );
	gglLoadMatrixf                              = GPA( "glLoadMatrixf" );
	gglLoadName                                    = GPA( "glLoadName" );
	gglLogicOp                                      = GPA( "glLogicOp" );
	gglMap1d                                          = GPA( "glMap1d" );
	gglMap1f                                          = GPA( "glMap1f" );
	gglMap2d                                          = GPA( "glMap2d" );
	gglMap2f                                          = GPA( "glMap2f" );
	gglMapGrid1d                                  = GPA( "glMapGrid1d" );
	gglMapGrid1f                                  = GPA( "glMapGrid1f" );
	gglMapGrid2d                                  = GPA( "glMapGrid2d" );
	gglMapGrid2f                                  = GPA( "glMapGrid2f" );
	gglMaterialf                                  = GPA( "glMaterialf" );
	gglMaterialfv                                = GPA( "glMaterialfv" );
	gglMateriali                                  = GPA( "glMateriali" );
	gglMaterialiv                                = GPA( "glMaterialiv" );
    */

    GEP( glMatrixMode );
    GEP( glMultMatrixd );
    GEP( glMultMatrixf );
    GEP( glNewList );
    GEP( glNormal3b );
    GEP( glNormal3bv );
    GEP( glNormal3d );
    GEP( glNormal3dv );
    GEP( glNormal3f );
    GEP( glNormal3fv );
    GEP( glNormal3i );
    GEP( glNormal3iv );
    GEP( glNormal3s );
    GEP( glNormal3sv );
    GEP( glNormalPointer );
    GEP( glOrtho );
    GEP( glPassThrough );
    GEP( glPixelMapfv );
    GEP( glPixelMapuiv );
    GEP( glPixelMapusv );
    GEP( glPixelStoref );
    GEP( glPixelStorei );
    GEP( glPixelTransferf );
    GEP( glPixelTransferi );
    GEP( glPixelZoom );
    GEP( glPointSize );
    GEP( glPolygonMode );
    GEP( glPolygonOffset );
    GEP( glPolygonStipple );
    GEP( glPopAttrib );
    GEP( glPopClientAttrib );
    GEP( glPopMatrix );
    GEP( glPopName );
    GEP( glPrioritizeTextures );
    GEP( glPushAttrib );
    GEP( glPushClientAttrib );
    GEP( glPushMatrix );
    GEP( glPushName );
    GEP( glRasterPos2d );
    GEP( glRasterPos2dv );
    GEP( glRasterPos2f );
    GEP( glRasterPos2fv );
    GEP( glRasterPos2i );
    GEP( glRasterPos2iv );

    /*
	gglMatrixMode                                = GPA( "glMatrixMode" );
	gglMultMatrixd                              = GPA( "glMultMatrixd" );
	gglMultMatrixf                              = GPA( "glMultMatrixf" );
	gglNewList                                      = GPA( "glNewList" );
	gglNormal3b                                    = GPA( "glNormal3b" );
	gglNormal3bv                                  = GPA( "glNormal3bv" );
	gglNormal3d                                    = GPA( "glNormal3d" );
	gglNormal3dv                                  = GPA( "glNormal3dv" );
	gglNormal3f                                    = GPA( "glNormal3f" );
	gglNormal3fv                                  = GPA( "glNormal3fv" );
	gglNormal3i                                    = GPA( "glNormal3i" );
	gglNormal3iv                                  = GPA( "glNormal3iv" );
	gglNormal3s                                    = GPA( "glNormal3s" );
	gglNormal3sv                                  = GPA( "glNormal3sv" );
	gglNormalPointer                          = GPA( "glNormalPointer" );
	gglOrtho                                          = GPA( "glOrtho" );
	gglPassThrough                              = GPA( "glPassThrough" );
	gglPixelMapfv                                = GPA( "glPixelMapfv" );
	gglPixelMapuiv                              = GPA( "glPixelMapuiv" );
	gglPixelMapusv                              = GPA( "glPixelMapusv" );
	gglPixelStoref                              = GPA( "glPixelStoref" );
	gglPixelStorei                              = GPA( "glPixelStorei" );
	gglPixelTransferf                        = GPA( "glPixelTransferf" );
	gglPixelTransferi                        = GPA( "glPixelTransferi" );
	gglPixelZoom                                  = GPA( "glPixelZoom" );
	gglPointSize                                  = GPA( "glPointSize" );
	gglPolygonMode                              = GPA( "glPolygonMode" );
	gglPolygonOffset                          = GPA( "glPolygonOffset" );
	gglPolygonStipple                        = GPA( "glPolygonStipple" );
	gglPopAttrib                                  = GPA( "glPopAttrib" );
	gglPopClientAttrib                      = GPA( "glPopClientAttrib" );
	gglPopMatrix                                  = GPA( "glPopMatrix" );
	gglPopName                                      = GPA( "glPopName" );
	gglPrioritizeTextures                = GPA( "glPrioritizeTextures" );
	gglPushAttrib                                = GPA( "glPushAttrib" );
	gglPushClientAttrib                    = GPA( "glPushClientAttrib" );
	gglPushMatrix                                = GPA( "glPushMatrix" );
	gglPushName                                    = GPA( "glPushName" );
	gglRasterPos2d                              = GPA( "glRasterPos2d" );
	gglRasterPos2dv                            = GPA( "glRasterPos2dv" );
	gglRasterPos2f                              = GPA( "glRasterPos2f" );
	gglRasterPos2fv                            = GPA( "glRasterPos2fv" );
	gglRasterPos2i                              = GPA( "glRasterPos2i" );
	gglRasterPos2iv                            = GPA( "glRasterPos2iv" );
    */

    GEP( glRasterPos2s );
    GEP( glRasterPos2sv );
    GEP( glRasterPos3d );
    GEP( glRasterPos3dv );
    GEP( glRasterPos3f );
    GEP( glRasterPos3fv );
    GEP( glRasterPos3i );
    GEP( glRasterPos3iv );
    GEP( glRasterPos3s );
    GEP( glRasterPos3sv );
    GEP( glRasterPos4d );
    GEP( glRasterPos4dv );
    GEP( glRasterPos4f );
    GEP( glRasterPos4fv );
    GEP( glRasterPos4i );
    GEP( glRasterPos4iv );
    GEP( glRasterPos4s );
    GEP( glRasterPos4sv );
    GEP( glReadBuffer );
    GEP( glReadPixels );
    GEP( glRectd );
    GEP( glRectdv );
    GEP( glRectf );
    GEP( glRectfv );
    GEP( glRecti );
    GEP( glRectiv );
    GEP( glRects );
    GEP( glRectsv );
    GEP( glRenderMode );
    GEP( glRotated );
    GEP( glRotatef );
    GEP( glScaled );
    GEP( glScalef );
    GEP( glScissor );
    GEP( glSelectBuffer );
    GEP( glShadeModel );
    GEP( glStencilFunc );
    GEP( glStencilMask );
    GEP( glStencilOp );
    GEP( glTexCoord1d );
    GEP( glTexCoord1dv );
    GEP( glTexCoord1f );
    GEP( glTexCoord1fv );

    /*
	gglRasterPos2s                              = GPA( "glRasterPos2s" );
	gglRasterPos2sv                            = GPA( "glRasterPos2sv" );
	gglRasterPos3d                              = GPA( "glRasterPos3d" );
	gglRasterPos3dv                            = GPA( "glRasterPos3dv" );
	gglRasterPos3f                              = GPA( "glRasterPos3f" );
	gglRasterPos3fv                            = GPA( "glRasterPos3fv" );
	gglRasterPos3i                              = GPA( "glRasterPos3i" );
	gglRasterPos3iv                            = GPA( "glRasterPos3iv" );
	gglRasterPos3s                              = GPA( "glRasterPos3s" );
	gglRasterPos3sv                            = GPA( "glRasterPos3sv" );
	gglRasterPos4d                              = GPA( "glRasterPos4d" );
	gglRasterPos4dv                            = GPA( "glRasterPos4dv" );
	gglRasterPos4f                              = GPA( "glRasterPos4f" );
	gglRasterPos4fv                            = GPA( "glRasterPos4fv" );
	gglRasterPos4i                              = GPA( "glRasterPos4i" );
	gglRasterPos4iv                            = GPA( "glRasterPos4iv" );
	gglRasterPos4s                              = GPA( "glRasterPos4s" );
	gglRasterPos4sv                            = GPA( "glRasterPos4sv" );
	gglReadBuffer                                = GPA( "glReadBuffer" );
	gglReadPixels                                = GPA( "glReadPixels" );
	gglRectd                                          = GPA( "glRectd" );
	gglRectdv                                        = GPA( "glRectdv" );
	gglRectf                                          = GPA( "glRectf" );
	gglRectfv                                        = GPA( "glRectfv" );
	gglRecti                                          = GPA( "glRecti" );
	gglRectiv                                        = GPA( "glRectiv" );
	gglRects                                          = GPA( "glRects" );
	gglRectsv                                        = GPA( "glRectsv" );
	gglRenderMode                                = GPA( "glRenderMode" );
	gglRotated                                      = GPA( "glRotated" );
	gglRotatef                                      = GPA( "glRotatef" );
	gglScaled                                        = GPA( "glScaled" );
	gglScalef                                        = GPA( "glScalef" );
	gglScissor                                      = GPA( "glScissor" );
	gglSelectBuffer                            = GPA( "glSelectBuffer" );
	gglShadeModel                                = GPA( "glShadeModel" );
	gglStencilFunc                              = GPA( "glStencilFunc" );
	gglStencilMask                              = GPA( "glStencilMask" );
	gglStencilOp                                  = GPA( "glStencilOp" );
	gglTexCoord1d                                = GPA( "glTexCoord1d" );
	gglTexCoord1dv                              = GPA( "glTexCoord1dv" );
	gglTexCoord1f                                = GPA( "glTexCoord1f" );
	gglTexCoord1fv                              = GPA( "glTexCoord1fv" );
    */

    GEP( glTexCoord1i );
    GEP( glTexCoord1iv );
    GEP( glTexCoord1s );
    GEP( glTexCoord1sv );
    GEP( glTexCoord2d );
    GEP( glTexCoord2dv );
    GEP( glTexCoord2f );
    GEP( glTexCoord2fv );
    GEP( glTexCoord2i );
    GEP( glTexCoord2iv );
    GEP( glTexCoord2s );
    GEP( glTexCoord2sv );
    GEP( glTexCoord3d );
    GEP( glTexCoord3dv );
    GEP( glTexCoord3f );
    GEP( glTexCoord3fv );
    GEP( glTexCoord3i );
    GEP( glTexCoord3iv );
    GEP( glTexCoord3s );
    GEP( glTexCoord3sv );
    GEP( glTexCoord4d );
    GEP( glTexCoord4dv );
    GEP( glTexCoord4f );
    GEP( glTexCoord4fv );
    GEP( glTexCoord4i );
    GEP( glTexCoord4iv );
    GEP( glTexCoord4s );
    GEP( glTexCoord4sv );
    GEP( glTexCoordPointer );
    GEP( glTexEnvf );
    GEP( glTexEnvfv );
    GEP( glTexEnvi );
    GEP( glTexEnviv );
    GEP( glTexGend );
    GEP( glTexGendv );
    GEP( glTexGenf );
    GEP( glTexGenfv );
    GEP( glTexGeni );
    GEP( glTexGeniv );
    GEP( glTexImage1D );
    GEP( glTexImage2D );
    GEP( glTexParameterf );
    GEP( glTexParameterfv );

    /*
	gglTexCoord1i                                = GPA( "glTexCoord1i" );
	gglTexCoord1iv                              = GPA( "glTexCoord1iv" );
	gglTexCoord1s                                = GPA( "glTexCoord1s" );
	gglTexCoord1sv                              = GPA( "glTexCoord1sv" );
	gglTexCoord2d                                = GPA( "glTexCoord2d" );
	gglTexCoord2dv                              = GPA( "glTexCoord2dv" );
	gglTexCoord2f                                = GPA( "glTexCoord2f" );
	gglTexCoord2fv                              = GPA( "glTexCoord2fv" );
	gglTexCoord2i                                = GPA( "glTexCoord2i" );
	gglTexCoord2iv                              = GPA( "glTexCoord2iv" );
	gglTexCoord2s                                = GPA( "glTexCoord2s" );
	gglTexCoord2sv                              = GPA( "glTexCoord2sv" );
	gglTexCoord3d                                = GPA( "glTexCoord3d" );
	gglTexCoord3dv                              = GPA( "glTexCoord3dv" );
	gglTexCoord3f                                = GPA( "glTexCoord3f" );
	gglTexCoord3fv                              = GPA( "glTexCoord3fv" );
	gglTexCoord3i                                = GPA( "glTexCoord3i" );
	gglTexCoord3iv                              = GPA( "glTexCoord3iv" );
	gglTexCoord3s                                = GPA( "glTexCoord3s" );
	gglTexCoord3sv                              = GPA( "glTexCoord3sv" );
	gglTexCoord4d                                = GPA( "glTexCoord4d" );
	gglTexCoord4dv                              = GPA( "glTexCoord4dv" );
	gglTexCoord4f                                = GPA( "glTexCoord4f" );
	gglTexCoord4fv                              = GPA( "glTexCoord4fv" );
	gglTexCoord4i                                = GPA( "glTexCoord4i" );
	gglTexCoord4iv                              = GPA( "glTexCoord4iv" );
	gglTexCoord4s                                = GPA( "glTexCoord4s" );
	gglTexCoord4sv                              = GPA( "glTexCoord4sv" );
	gglTexCoordPointer                      = GPA( "glTexCoordPointer" );
	gglTexEnvf                                      = GPA( "glTexEnvf" );
	gglTexEnvfv                                    = GPA( "glTexEnvfv" );
	gglTexEnvi                                      = GPA( "glTexEnvi" );
	gglTexEnviv                                    = GPA( "glTexEnviv" );
	gglTexGend                                      = GPA( "glTexGend" );
	gglTexGendv                                    = GPA( "glTexGendv" );
	gglTexGenf                                      = GPA( "glTexGenf" );
	gglTexGenfv                                    = GPA( "glTexGenfv" );
	gglTexGeni                                      = GPA( "glTexGeni" );
	gglTexGeniv                                    = GPA( "glTexGeniv" );
	gglTexImage1D                                = GPA( "glTexImage1D" );
	gglTexImage2D                                = GPA( "glTexImage2D" );
	gglTexParameterf                          = GPA( "glTexParameterf" );
	gglTexParameterfv                        = GPA( "glTexParameterfv" );
    */

    GEP( glTexParameteri );
    GEP( glTexParameteriv );
    GEP( glTexSubImage1D );
    GEP( glTexSubImage2D );
    GEP( glTranslated );
    GEP( glTranslatef );
    GEP( glVertex2d );
    GEP( glVertex2dv );
    GEP( glVertex2f );
    GEP( glVertex2fv );
    GEP( glVertex2i );
    GEP( glVertex2iv );
    GEP( glVertex2s );
    GEP( glVertex2sv );
    GEP( glVertex3d );
    GEP( glVertex3dv );
    GEP( glVertex3f );
    GEP( glVertex3fv );
    GEP( glVertex3i );
    GEP( glVertex3iv );
    GEP( glVertex3s );
    GEP( glVertex3sv );
    GEP( glVertex4d );
    GEP( glVertex4dv );
    GEP( glVertex4f );
    GEP( glVertex4fv );
    GEP( glVertex4i );
    GEP( glVertex4iv );
    GEP( glVertex4s );
    GEP( glVertex4sv );
    GEP( glVertexPointer );
    GEP( glViewport );
    GEP( wglCopyContext );
    GEP( wglCreateContext );
    GEP( wglCreateLayerContext );
    GEP( wglDeleteContext );
    GEP( wglDescribeLayerPlane );
    GEP( wglGetCurrentContext );
    GEP( wglGetCurrentDC );
    GEP( wglGetLayerPaletteEntries );
    GEP( wglGetProcAddress );


    /*
	gglTexParameteri                          = GPA( "glTexParameteri" );
	gglTexParameteriv                        = GPA( "glTexParameteriv" );
	gglTexSubImage1D                          = GPA( "glTexSubImage1D" );
	gglTexSubImage2D                          = GPA( "glTexSubImage2D" );
	gglTranslated                                = GPA( "glTranslated" );
	gglTranslatef                                = GPA( "glTranslatef" );
	gglVertex2d                                    = GPA( "glVertex2d" );
	gglVertex2dv                                  = GPA( "glVertex2dv" );
	gglVertex2f                                    = GPA( "glVertex2f" );
	gglVertex2fv                                  = GPA( "glVertex2fv" );
	gglVertex2i                                    = GPA( "glVertex2i" );
	gglVertex2iv                                  = GPA( "glVertex2iv" );
	gglVertex2s                                    = GPA( "glVertex2s" );
	gglVertex2sv                                  = GPA( "glVertex2sv" );
	gglVertex3d                                    = GPA( "glVertex3d" );
	gglVertex3dv                                  = GPA( "glVertex3dv" );
	gglVertex3f                                    = GPA( "glVertex3f" );
	gglVertex3fv                                  = GPA( "glVertex3fv" );
	gglVertex3i                                    = GPA( "glVertex3i" );
	gglVertex3iv                                  = GPA( "glVertex3iv" );
	gglVertex3s                                    = GPA( "glVertex3s" );
	gglVertex3sv                                  = GPA( "glVertex3sv" );
	gglVertex4d                                    = GPA( "glVertex4d" );
	gglVertex4dv                                  = GPA( "glVertex4dv" );
	gglVertex4f                                    = GPA( "glVertex4f" );
	gglVertex4fv                                  = GPA( "glVertex4fv" );
	gglVertex4i                                    = GPA( "glVertex4i" );
	gglVertex4iv                                  = GPA( "glVertex4iv" );
	gglVertex4s                                    = GPA( "glVertex4s" );
	gglVertex4sv                                  = GPA( "glVertex4sv" );
	gglVertexPointer                          = GPA( "glVertexPointer" );
	gglViewport                                    = GPA( "glViewport" );

	gwglCopyContext              = GPA( "wglCopyContext" );
	gwglCreateContext            = GPA( "wglCreateContext" );
	gwglCreateLayerContext       = GPA( "wglCreateLayerContext" );
	gwglDeleteContext            = GPA( "wglDeleteContext" );
	gwglDescribeLayerPlane       = GPA( "wglDescribeLayerPlane" );
	gwglGetCurrentContext        = GPA( "wglGetCurrentContext" );
	gwglGetCurrentDC             = GPA( "wglGetCurrentDC" );
	gwglGetLayerPaletteEntries   = GPA( "wglGetLayerPaletteEntries" );
	gwglGetProcAddress           = GPA( "wglGetProcAddress" );
    */

    GEP( wglMakeCurrent );
    GEP( wglRealizeLayerPalette );
    GEP( wglSetLayerPaletteEntries );
    GEP( wglShareLists );
    GEP( wglSwapLayerBuffers );
    GEP( wglUseFontBitmaps );
    GEP( wglUseFontOutlines );
    GEP( wglChoosePixelFormat );
    GEP( wglDescribePixelFormat );
    GEP( wglGetPixelFormat );
    GEP( wglSetPixelFormat );
    GEP( wglSwapBuffers );

    /*
	gwglMakeCurrent              = GPA( "wglMakeCurrent" );
	gwglRealizeLayerPalette      = GPA( "wglRealizeLayerPalette" );
	gwglSetLayerPaletteEntries   = GPA( "wglSetLayerPaletteEntries" );
	gwglShareLists               = GPA( "wglShareLists" );
	gwglSwapLayerBuffers         = GPA( "wglSwapLayerBuffers" );
	gwglUseFontBitmaps           = GPA( "wglUseFontBitmapsA" );
	gwglUseFontOutlines          = GPA( "wglUseFontOutlinesA" );

	gwglChoosePixelFormat        = GPA( "wglChoosePixelFormat" );
	gwglDescribePixelFormat      = GPA( "wglDescribePixelFormat" );
	gwglGetPixelFormat           = GPA( "wglGetPixelFormat" );
	gwglSetPixelFormat           = GPA( "wglSetPixelFormat" );
	gwglSwapBuffers              = GPA( "wglSwapBuffers" );
    */

	gwglSwapIntervalEXT = 0;
    gwglGetSwapIntervalEXT = 0;
	gglActiveTextureARB = 0;
	gglActiveTexture = 0;
	gglClientActiveTextureARB = 0;
	gglMultiTexCoord2fARB = 0;
	gglMultiTexCoord2f = 0;
	gglLockArraysEXT = 0;
	gglUnlockArraysEXT = 0;
	gwglGetDeviceGammaRamp3DFX = NULL;
	gwglSetDeviceGammaRamp3DFX = NULL;

	return gtrue;
}


