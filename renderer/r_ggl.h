#ifndef __R_GGL_H__
#define __R_GGL_H__

#include <windows.h>
#include <gl/gl.h>


extern  void ( APIENTRY * gglAccum )(GLenum op, GLfloat value);
extern  void ( APIENTRY * gglAlphaFunc )(GLenum func, GLclampf ref);
extern  GLboolean ( APIENTRY * gglAreTexturesResident )(GLsizei n, const GLuint *textures, GLboolean *residences);
extern  void ( APIENTRY * gglArrayElement )(GLint i);
extern  void ( APIENTRY * gglBegin )(GLenum mode);
extern  void ( APIENTRY * gglBindTexture )(GLenum target, GLuint texture);
extern  void ( APIENTRY * gglBitmap )(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
extern  void ( APIENTRY * gglBlendFunc )(GLenum sfactor, GLenum dfactor);
extern  void ( APIENTRY * gglCallList )(GLuint list);
extern  void ( APIENTRY * gglCallLists )(GLsizei n, GLenum type, const GLvoid *lists);
extern  void ( APIENTRY * gglClear )(GLbitfield mask);
extern  void ( APIENTRY * gglClearAccum )(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern  void ( APIENTRY * gglClearColor )(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
extern  void ( APIENTRY * gglClearDepth )(GLclampd depth);
extern  void ( APIENTRY * gglClearIndex )(GLfloat c);
extern  void ( APIENTRY * gglClearStencil )(GLint s);
extern  void ( APIENTRY * gglClipPlane )(GLenum plane, const GLdouble *equation);
extern  void ( APIENTRY * gglColor3b )(GLbyte red, GLbyte green, GLbyte blue);
extern  void ( APIENTRY * gglColor3bv )(const GLbyte *v);
extern  void ( APIENTRY * gglColor3d )(GLdouble red, GLdouble green, GLdouble blue);
extern  void ( APIENTRY * gglColor3dv )(const GLdouble *v);
extern  void ( APIENTRY * gglColor3f )(GLfloat red, GLfloat green, GLfloat blue);
extern  void ( APIENTRY * gglColor3fv )(const GLfloat *v);
extern  void ( APIENTRY * gglColor3i )(GLint red, GLint green, GLint blue);
extern  void ( APIENTRY * gglColor3iv )(const GLint *v);
extern  void ( APIENTRY * gglColor3s )(GLshort red, GLshort green, GLshort blue);
extern  void ( APIENTRY * gglColor3sv )(const GLshort *v);
extern  void ( APIENTRY * gglColor3ub )(GLubyte red, GLubyte green, GLubyte blue);
extern  void ( APIENTRY * gglColor3ubv )(const GLubyte *v);
extern  void ( APIENTRY * gglColor3ui )(GLuint red, GLuint green, GLuint blue);
extern  void ( APIENTRY * gglColor3uiv )(const GLuint *v);
extern  void ( APIENTRY * gglColor3us )(GLushort red, GLushort green, GLushort blue);
extern  void ( APIENTRY * gglColor3usv )(const GLushort *v);
extern  void ( APIENTRY * gglColor4b )(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
extern  void ( APIENTRY * gglColor4bv )(const GLbyte *v);
extern  void ( APIENTRY * gglColor4d )(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
extern  void ( APIENTRY * gglColor4dv )(const GLdouble *v);
extern  void ( APIENTRY * gglColor4f )(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern  void ( APIENTRY * gglColor4fv )(const GLfloat *v);
extern  void ( APIENTRY * gglColor4i )(GLint red, GLint green, GLint blue, GLint alpha);
extern  void ( APIENTRY * gglColor4iv )(const GLint *v);
extern  void ( APIENTRY * gglColor4s )(GLshort red, GLshort green, GLshort blue, GLshort alpha);
extern  void ( APIENTRY * gglColor4sv )(const GLshort *v);
extern  void ( APIENTRY * gglColor4ub )(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
extern  void ( APIENTRY * gglColor4ubv )(const GLubyte *v);
extern  void ( APIENTRY * gglColor4ui )(GLuint red, GLuint green, GLuint blue, GLuint alpha);
extern  void ( APIENTRY * gglColor4uiv )(const GLuint *v);
extern  void ( APIENTRY * gglColor4us )(GLushort red, GLushort green, GLushort blue, GLushort alpha);
extern  void ( APIENTRY * gglColor4usv )(const GLushort *v);
extern  void ( APIENTRY * gglColorMask )(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern  void ( APIENTRY * gglColorMaterial )(GLenum face, GLenum mode);
extern  void ( APIENTRY * gglColorPointer )(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
extern  void ( APIENTRY * gglCopyPixels )(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
extern  void ( APIENTRY * gglCopyTexImage1D )(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
extern  void ( APIENTRY * gglCopyTexImage2D )(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
extern  void ( APIENTRY * gglCopyTexSubImage1D )(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern  void ( APIENTRY * gglCopyTexSubImage2D )(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern  void ( APIENTRY * gglCullFace )(GLenum mode);
extern  void ( APIENTRY * gglDeleteLists )(GLuint list, GLsizei range);
extern  void ( APIENTRY * gglDeleteTextures )(GLsizei n, const GLuint *textures);
extern  void ( APIENTRY * gglDepthFunc )(GLenum func);
extern  void ( APIENTRY * gglDepthMask )(GLboolean flag);
extern  void ( APIENTRY * gglDepthRange )(GLclampd zNear, GLclampd zFar);
extern  void ( APIENTRY * gglDisable )(GLenum cap);
extern  void ( APIENTRY * gglDisableClientState )(GLenum array);
extern  void ( APIENTRY * gglDrawArrays )(GLenum mode, GLint first, GLsizei count);
extern  void ( APIENTRY * gglDrawBuffer )(GLenum mode);
extern  void ( APIENTRY * gglDrawElements )(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
extern  void ( APIENTRY * gglDrawPixels )(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
extern  void ( APIENTRY * gglEdgeFlag )(GLboolean flag);
extern  void ( APIENTRY * gglEdgeFlagPointer )(GLsizei stride, const GLvoid *pointer);
extern  void ( APIENTRY * gglEdgeFlagv )(const GLboolean *flag);
extern  void ( APIENTRY * gglEnable )(GLenum cap);
extern  void ( APIENTRY * gglEnableClientState )(GLenum array);
extern  void ( APIENTRY * gglEnd )(void);
extern  void ( APIENTRY * gglEndList )(void);
extern  void ( APIENTRY * gglEvalCoord1d )(GLdouble u);
extern  void ( APIENTRY * gglEvalCoord1dv )(const GLdouble *u);
extern  void ( APIENTRY * gglEvalCoord1f )(GLfloat u);
extern  void ( APIENTRY * gglEvalCoord1fv )(const GLfloat *u);
extern  void ( APIENTRY * gglEvalCoord2d )(GLdouble u, GLdouble v);
extern  void ( APIENTRY * gglEvalCoord2dv )(const GLdouble *u);
extern  void ( APIENTRY * gglEvalCoord2f )(GLfloat u, GLfloat v);
extern  void ( APIENTRY * gglEvalCoord2fv )(const GLfloat *u);
extern  void ( APIENTRY * gglEvalMesh1 )(GLenum mode, GLint i1, GLint i2);
extern  void ( APIENTRY * gglEvalMesh2 )(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
extern  void ( APIENTRY * gglEvalPoint1 )(GLint i);
extern  void ( APIENTRY * gglEvalPoint2 )(GLint i, GLint j);
extern  void ( APIENTRY * gglFeedbackBuffer )(GLsizei size, GLenum type, GLfloat *buffer);
extern  void ( APIENTRY * gglFinish )(void);
extern  void ( APIENTRY * gglFlush )(void);
extern  void ( APIENTRY * gglFogf )(GLenum pname, GLfloat param);
extern  void ( APIENTRY * gglFogfv )(GLenum pname, const GLfloat *params);
extern  void ( APIENTRY * gglFogi )(GLenum pname, GLint param);
extern  void ( APIENTRY * gglFogiv )(GLenum pname, const GLint *params);
extern  void ( APIENTRY * gglFrontFace )(GLenum mode);
extern  void ( APIENTRY * gglFrustum )(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern  GLuint ( APIENTRY * gglGenLists )(GLsizei range);
extern  void ( APIENTRY * gglGenTextures )(GLsizei n, GLuint *textures);
extern  void ( APIENTRY * gglGetBooleanv )(GLenum pname, GLboolean *params);
extern  void ( APIENTRY * gglGetClipPlane )(GLenum plane, GLdouble *equation);
extern  void ( APIENTRY * gglGetDoublev )(GLenum pname, GLdouble *params);
extern  GLenum ( APIENTRY * gglGetError )(void);
extern  void ( APIENTRY * gglGetFloatv )(GLenum pname, GLfloat *params);
extern  void ( APIENTRY * gglGetIntegerv )(GLenum pname, GLint *params);
extern  void ( APIENTRY * gglGetLightfv )(GLenum light, GLenum pname, GLfloat *params);
extern  void ( APIENTRY * gglGetLightiv )(GLenum light, GLenum pname, GLint *params);
extern  void ( APIENTRY * gglGetMapdv )(GLenum target, GLenum query, GLdouble *v);
extern  void ( APIENTRY * gglGetMapfv )(GLenum target, GLenum query, GLfloat *v);
extern  void ( APIENTRY * gglGetMapiv )(GLenum target, GLenum query, GLint *v);
extern  void ( APIENTRY * gglGetMaterialfv )(GLenum face, GLenum pname, GLfloat *params);
extern  void ( APIENTRY * gglGetMaterialiv )(GLenum face, GLenum pname, GLint *params);
extern  void ( APIENTRY * gglGetPixelMapfv )(GLenum map, GLfloat *values);
extern  void ( APIENTRY * gglGetPixelMapuiv )(GLenum map, GLuint *values);
extern  void ( APIENTRY * gglGetPixelMapusv )(GLenum map, GLushort *values);
extern  void ( APIENTRY * gglGetPointerv )(GLenum pname, GLvoid* *params);
extern  void ( APIENTRY * gglGetPolygonStipple )(GLubyte *mask);
extern  const GLubyte * ( APIENTRY * gglGetString )(GLenum name);
extern  void ( APIENTRY * gglGetTexEnvfv )(GLenum target, GLenum pname, GLfloat *params);
extern  void ( APIENTRY * gglGetTexEnviv )(GLenum target, GLenum pname, GLint *params);
extern  void ( APIENTRY * gglGetTexGendv )(GLenum coord, GLenum pname, GLdouble *params);
extern  void ( APIENTRY * gglGetTexGenfv )(GLenum coord, GLenum pname, GLfloat *params);
extern  void ( APIENTRY * gglGetTexGeniv )(GLenum coord, GLenum pname, GLint *params);
extern  void ( APIENTRY * gglGetTexImage )(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
extern  void ( APIENTRY * gglGetTexLevelParameterfv )(GLenum target, GLint level, GLenum pname, GLfloat *params);
extern  void ( APIENTRY * gglGetTexLevelParameteriv )(GLenum target, GLint level, GLenum pname, GLint *params);
extern  void ( APIENTRY * gglGetTexParameterfv )(GLenum target, GLenum pname, GLfloat *params);
extern  void ( APIENTRY * gglGetTexParameteriv )(GLenum target, GLenum pname, GLint *params);
extern  void ( APIENTRY * gglHint )(GLenum target, GLenum mode);
extern  void ( APIENTRY * gglIndexMask )(GLuint mask);
extern  void ( APIENTRY * gglIndexPointer )(GLenum type, GLsizei stride, const GLvoid *pointer);
extern  void ( APIENTRY * gglIndexd )(GLdouble c);
extern  void ( APIENTRY * gglIndexdv )(const GLdouble *c);
extern  void ( APIENTRY * gglIndexf )(GLfloat c);
extern  void ( APIENTRY * gglIndexfv )(const GLfloat *c);
extern  void ( APIENTRY * gglIndexi )(GLint c);
extern  void ( APIENTRY * gglIndexiv )(const GLint *c);
extern  void ( APIENTRY * gglIndexs )(GLshort c);
extern  void ( APIENTRY * gglIndexsv )(const GLshort *c);
extern  void ( APIENTRY * gglIndexub )(GLubyte c);
extern  void ( APIENTRY * gglIndexubv )(const GLubyte *c);
extern  void ( APIENTRY * gglInitNames )(void);
extern  void ( APIENTRY * gglInterleavedArrays )(GLenum format, GLsizei stride, const GLvoid *pointer);
extern  GLboolean ( APIENTRY * gglIsEnabled )(GLenum cap);
extern  GLboolean ( APIENTRY * gglIsList )(GLuint list);
extern  GLboolean ( APIENTRY * gglIsTexture )(GLuint texture);
extern  void ( APIENTRY * gglLightModelf )(GLenum pname, GLfloat param);
extern  void ( APIENTRY * gglLightModelfv )(GLenum pname, const GLfloat *params);
extern  void ( APIENTRY * gglLightModeli )(GLenum pname, GLint param);
extern  void ( APIENTRY * gglLightModeliv )(GLenum pname, const GLint *params);
extern  void ( APIENTRY * gglLightf )(GLenum light, GLenum pname, GLfloat param);
extern  void ( APIENTRY * gglLightfv )(GLenum light, GLenum pname, const GLfloat *params);
extern  void ( APIENTRY * gglLighti )(GLenum light, GLenum pname, GLint param);
extern  void ( APIENTRY * gglLightiv )(GLenum light, GLenum pname, const GLint *params);
extern  void ( APIENTRY * gglLineStipple )(GLint factor, GLushort pattern);
extern  void ( APIENTRY * gglLineWidth )(GLfloat width);
extern  void ( APIENTRY * gglListBase )(GLuint base);
extern  void ( APIENTRY * gglLoadIdentity )(void);
extern  void ( APIENTRY * gglLoadMatrixd )(const GLdouble *m);
extern  void ( APIENTRY * gglLoadMatrixf )(const GLfloat *m);
extern  void ( APIENTRY * gglLoadName )(GLuint name);
extern  void ( APIENTRY * gglLogicOp )(GLenum opcode);
extern  void ( APIENTRY * gglMap1d )(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
extern  void ( APIENTRY * gglMap1f )(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
extern  void ( APIENTRY * gglMap2d )(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
extern  void ( APIENTRY * gglMap2f )(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
extern  void ( APIENTRY * gglMapGrid1d )(GLint un, GLdouble u1, GLdouble u2);
extern  void ( APIENTRY * gglMapGrid1f )(GLint un, GLfloat u1, GLfloat u2);
extern  void ( APIENTRY * gglMapGrid2d )(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
extern  void ( APIENTRY * gglMapGrid2f )(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
extern  void ( APIENTRY * gglMaterialf )(GLenum face, GLenum pname, GLfloat param);
extern  void ( APIENTRY * gglMaterialfv )(GLenum face, GLenum pname, const GLfloat *params);
extern  void ( APIENTRY * gglMateriali )(GLenum face, GLenum pname, GLint param);
extern  void ( APIENTRY * gglMaterialiv )(GLenum face, GLenum pname, const GLint *params);
extern  void ( APIENTRY * gglMatrixMode )(GLenum mode);
extern  void ( APIENTRY * gglMultMatrixd )(const GLdouble *m);
extern  void ( APIENTRY * gglMultMatrixf )(const GLfloat *m);
extern  void ( APIENTRY * gglNewList )(GLuint list, GLenum mode);
extern  void ( APIENTRY * gglNormal3b )(GLbyte nx, GLbyte ny, GLbyte nz);
extern  void ( APIENTRY * gglNormal3bv )(const GLbyte *v);
extern  void ( APIENTRY * gglNormal3d )(GLdouble nx, GLdouble ny, GLdouble nz);
extern  void ( APIENTRY * gglNormal3dv )(const GLdouble *v);
extern  void ( APIENTRY * gglNormal3f )(GLfloat nx, GLfloat ny, GLfloat nz);
extern  void ( APIENTRY * gglNormal3fv )(const GLfloat *v);
extern  void ( APIENTRY * gglNormal3i )(GLint nx, GLint ny, GLint nz);
extern  void ( APIENTRY * gglNormal3iv )(const GLint *v);
extern  void ( APIENTRY * gglNormal3s )(GLshort nx, GLshort ny, GLshort nz);
extern  void ( APIENTRY * gglNormal3sv )(const GLshort *v);
extern  void ( APIENTRY * gglNormalPointer )(GLenum type, GLsizei stride, const GLvoid *pointer);
extern  void ( APIENTRY * gglOrtho )(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern  void ( APIENTRY * gglPassThrough )(GLfloat token);
extern  void ( APIENTRY * gglPixelMapfv )(GLenum map, GLsizei mapsize, const GLfloat *values);
extern  void ( APIENTRY * gglPixelMapuiv )(GLenum map, GLsizei mapsize, const GLuint *values);
extern  void ( APIENTRY * gglPixelMapusv )(GLenum map, GLsizei mapsize, const GLushort *values);
extern  void ( APIENTRY * gglPixelStoref )(GLenum pname, GLfloat param);
extern  void ( APIENTRY * gglPixelStorei )(GLenum pname, GLint param);
extern  void ( APIENTRY * gglPixelTransferf )(GLenum pname, GLfloat param);
extern  void ( APIENTRY * gglPixelTransferi )(GLenum pname, GLint param);
extern  void ( APIENTRY * gglPixelZoom )(GLfloat xfactor, GLfloat yfactor);
extern  void ( APIENTRY * gglPointSize )(GLfloat size);
extern  void ( APIENTRY * gglPolygonMode )(GLenum face, GLenum mode);
extern  void ( APIENTRY * gglPolygonOffset )(GLfloat factor, GLfloat units);
extern  void ( APIENTRY * gglPolygonStipple )(const GLubyte *mask);
extern  void ( APIENTRY * gglPopAttrib )(void);
extern  void ( APIENTRY * gglPopClientAttrib )(void);
extern  void ( APIENTRY * gglPopMatrix )(void);
extern  void ( APIENTRY * gglPopName )(void);
extern  void ( APIENTRY * gglPrioritizeTextures )(GLsizei n, const GLuint *textures, const GLclampf *priorities);
extern  void ( APIENTRY * gglPushAttrib )(GLbitfield mask);
extern  void ( APIENTRY * gglPushClientAttrib )(GLbitfield mask);
extern  void ( APIENTRY * gglPushMatrix )(void);
extern  void ( APIENTRY * gglPushName )(GLuint name);
extern  void ( APIENTRY * gglRasterPos2d )(GLdouble x, GLdouble y);
extern  void ( APIENTRY * gglRasterPos2dv )(const GLdouble *v);
extern  void ( APIENTRY * gglRasterPos2f )(GLfloat x, GLfloat y);
extern  void ( APIENTRY * gglRasterPos2fv )(const GLfloat *v);
extern  void ( APIENTRY * gglRasterPos2i )(GLint x, GLint y);
extern  void ( APIENTRY * gglRasterPos2iv )(const GLint *v);
extern  void ( APIENTRY * gglRasterPos2s )(GLshort x, GLshort y);
extern  void ( APIENTRY * gglRasterPos2sv )(const GLshort *v);
extern  void ( APIENTRY * gglRasterPos3d )(GLdouble x, GLdouble y, GLdouble z);
extern  void ( APIENTRY * gglRasterPos3dv )(const GLdouble *v);
extern  void ( APIENTRY * gglRasterPos3f )(GLfloat x, GLfloat y, GLfloat z);
extern  void ( APIENTRY * gglRasterPos3fv )(const GLfloat *v);
extern  void ( APIENTRY * gglRasterPos3i )(GLint x, GLint y, GLint z);
extern  void ( APIENTRY * gglRasterPos3iv )(const GLint *v);
extern  void ( APIENTRY * gglRasterPos3s )(GLshort x, GLshort y, GLshort z);
extern  void ( APIENTRY * gglRasterPos3sv )(const GLshort *v);
extern  void ( APIENTRY * gglRasterPos4d )(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern  void ( APIENTRY * gglRasterPos4dv )(const GLdouble *v);
extern  void ( APIENTRY * gglRasterPos4f )(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern  void ( APIENTRY * gglRasterPos4fv )(const GLfloat *v);
extern  void ( APIENTRY * gglRasterPos4i )(GLint x, GLint y, GLint z, GLint w);
extern  void ( APIENTRY * gglRasterPos4iv )(const GLint *v);
extern  void ( APIENTRY * gglRasterPos4s )(GLshort x, GLshort y, GLshort z, GLshort w);
extern  void ( APIENTRY * gglRasterPos4sv )(const GLshort *v);
extern  void ( APIENTRY * gglReadBuffer )(GLenum mode);
extern  void ( APIENTRY * gglReadPixels )(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
extern  void ( APIENTRY * gglRectd )(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
extern  void ( APIENTRY * gglRectdv )(const GLdouble *v1, const GLdouble *v2);
extern  void ( APIENTRY * gglRectf )(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
extern  void ( APIENTRY * gglRectfv )(const GLfloat *v1, const GLfloat *v2);
extern  void ( APIENTRY * gglRecti )(GLint x1, GLint y1, GLint x2, GLint y2);
extern  void ( APIENTRY * gglRectiv )(const GLint *v1, const GLint *v2);
extern  void ( APIENTRY * gglRects )(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
extern  void ( APIENTRY * gglRectsv )(const GLshort *v1, const GLshort *v2);
extern  GLint ( APIENTRY * gglRenderMode )(GLenum mode);
extern  void ( APIENTRY * gglRotated )(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
extern  void ( APIENTRY * gglRotatef )(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
extern  void ( APIENTRY * gglScaled )(GLdouble x, GLdouble y, GLdouble z);
extern  void ( APIENTRY * gglScalef )(GLfloat x, GLfloat y, GLfloat z);
extern  void ( APIENTRY * gglScissor )(GLint x, GLint y, GLsizei width, GLsizei height);
extern  void ( APIENTRY * gglSelectBuffer )(GLsizei size, GLuint *buffer);
extern  void ( APIENTRY * gglShadeModel )(GLenum mode);
extern  void ( APIENTRY * gglStencilFunc )(GLenum func, GLint ref, GLuint mask);
extern  void ( APIENTRY * gglStencilMask )(GLuint mask);
extern  void ( APIENTRY * gglStencilOp )(GLenum fail, GLenum zfail, GLenum zpass);
extern  void ( APIENTRY * gglTexCoord1d )(GLdouble s);
extern  void ( APIENTRY * gglTexCoord1dv )(const GLdouble *v);
extern  void ( APIENTRY * gglTexCoord1f )(GLfloat s);
extern  void ( APIENTRY * gglTexCoord1fv )(const GLfloat *v);
extern  void ( APIENTRY * gglTexCoord1i )(GLint s);
extern  void ( APIENTRY * gglTexCoord1iv )(const GLint *v);
extern  void ( APIENTRY * gglTexCoord1s )(GLshort s);
extern  void ( APIENTRY * gglTexCoord1sv )(const GLshort *v);
extern  void ( APIENTRY * gglTexCoord2d )(GLdouble s, GLdouble t);
extern  void ( APIENTRY * gglTexCoord2dv )(const GLdouble *v);
extern  void ( APIENTRY * gglTexCoord2f )(GLfloat s, GLfloat t);
extern  void ( APIENTRY * gglTexCoord2fv )(const GLfloat *v);
extern  void ( APIENTRY * gglTexCoord2i )(GLint s, GLint t);
extern  void ( APIENTRY * gglTexCoord2iv )(const GLint *v);
extern  void ( APIENTRY * gglTexCoord2s )(GLshort s, GLshort t);
extern  void ( APIENTRY * gglTexCoord2sv )(const GLshort *v);
extern  void ( APIENTRY * gglTexCoord3d )(GLdouble s, GLdouble t, GLdouble r);
extern  void ( APIENTRY * gglTexCoord3dv )(const GLdouble *v);
extern  void ( APIENTRY * gglTexCoord3f )(GLfloat s, GLfloat t, GLfloat r);
extern  void ( APIENTRY * gglTexCoord3fv )(const GLfloat *v);
extern  void ( APIENTRY * gglTexCoord3i )(GLint s, GLint t, GLint r);
extern  void ( APIENTRY * gglTexCoord3iv )(const GLint *v);
extern  void ( APIENTRY * gglTexCoord3s )(GLshort s, GLshort t, GLshort r);
extern  void ( APIENTRY * gglTexCoord3sv )(const GLshort *v);
extern  void ( APIENTRY * gglTexCoord4d )(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern  void ( APIENTRY * gglTexCoord4dv )(const GLdouble *v);
extern  void ( APIENTRY * gglTexCoord4f )(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern  void ( APIENTRY * gglTexCoord4fv )(const GLfloat *v);
extern  void ( APIENTRY * gglTexCoord4i )(GLint s, GLint t, GLint r, GLint q);
extern  void ( APIENTRY * gglTexCoord4iv )(const GLint *v);
extern  void ( APIENTRY * gglTexCoord4s )(GLshort s, GLshort t, GLshort r, GLshort q);
extern  void ( APIENTRY * gglTexCoord4sv )(const GLshort *v);
extern  void ( APIENTRY * gglTexCoordPointer )(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
extern  void ( APIENTRY * gglTexEnvf )(GLenum target, GLenum pname, GLfloat param);
extern  void ( APIENTRY * gglTexEnvfv )(GLenum target, GLenum pname, const GLfloat *params);
extern  void ( APIENTRY * gglTexEnvi )(GLenum target, GLenum pname, GLint param);
extern  void ( APIENTRY * gglTexEnviv )(GLenum target, GLenum pname, const GLint *params);
extern  void ( APIENTRY * gglTexGend )(GLenum coord, GLenum pname, GLdouble param);
extern  void ( APIENTRY * gglTexGendv )(GLenum coord, GLenum pname, const GLdouble *params);
extern  void ( APIENTRY * gglTexGenf )(GLenum coord, GLenum pname, GLfloat param);
extern  void ( APIENTRY * gglTexGenfv )(GLenum coord, GLenum pname, const GLfloat *params);
extern  void ( APIENTRY * gglTexGeni )(GLenum coord, GLenum pname, GLint param);
extern  void ( APIENTRY * gglTexGeniv )(GLenum coord, GLenum pname, const GLint *params);
extern  void ( APIENTRY * gglTexImage1D )(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
extern  void ( APIENTRY * gglTexImage2D )(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
extern  void ( APIENTRY * gglTexParameterf )(GLenum target, GLenum pname, GLfloat param);
extern  void ( APIENTRY * gglTexParameterfv )(GLenum target, GLenum pname, const GLfloat *params);
extern  void ( APIENTRY * gglTexParameteri )(GLenum target, GLenum pname, GLint param);
extern  void ( APIENTRY * gglTexParameteriv )(GLenum target, GLenum pname, const GLint *params);
extern  void ( APIENTRY * gglTexSubImage1D )(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
extern  void ( APIENTRY * gglTexSubImage2D )(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
extern  void ( APIENTRY * gglTranslated )(GLdouble x, GLdouble y, GLdouble z);
extern  void ( APIENTRY * gglTranslatef )(GLfloat x, GLfloat y, GLfloat z);
extern  void ( APIENTRY * gglVertex2d )(GLdouble x, GLdouble y);
extern  void ( APIENTRY * gglVertex2dv )(const GLdouble *v);
extern  void ( APIENTRY * gglVertex2f )(GLfloat x, GLfloat y);
extern  void ( APIENTRY * gglVertex2fv )(const GLfloat *v);
extern  void ( APIENTRY * gglVertex2i )(GLint x, GLint y);
extern  void ( APIENTRY * gglVertex2iv )(const GLint *v);
extern  void ( APIENTRY * gglVertex2s )(GLshort x, GLshort y);
extern  void ( APIENTRY * gglVertex2sv )(const GLshort *v);
extern  void ( APIENTRY * gglVertex3d )(GLdouble x, GLdouble y, GLdouble z);
extern  void ( APIENTRY * gglVertex3dv )(const GLdouble *v);
extern  void ( APIENTRY * gglVertex3f )(GLfloat x, GLfloat y, GLfloat z);
extern  void ( APIENTRY * gglVertex3fv )(const GLfloat *v);
extern  void ( APIENTRY * gglVertex3i )(GLint x, GLint y, GLint z);
extern  void ( APIENTRY * gglVertex3iv )(const GLint *v);
extern  void ( APIENTRY * gglVertex3s )(GLshort x, GLshort y, GLshort z);
extern  void ( APIENTRY * gglVertex3sv )(const GLshort *v);
extern  void ( APIENTRY * gglVertex4d )(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern  void ( APIENTRY * gglVertex4dv )(const GLdouble *v);
extern  void ( APIENTRY * gglVertex4f )(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern  void ( APIENTRY * gglVertex4fv )(const GLfloat *v);
extern  void ( APIENTRY * gglVertex4i )(GLint x, GLint y, GLint z, GLint w);
extern  void ( APIENTRY * gglVertex4iv )(const GLint *v);
extern  void ( APIENTRY * gglVertex4s )(GLshort x, GLshort y, GLshort z, GLshort w);
extern  void ( APIENTRY * gglVertex4sv )(const GLshort *v);
extern  void ( APIENTRY * gglVertexPointer )(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
extern  void ( APIENTRY * gglViewport )(GLint x, GLint y, GLsizei width, GLsizei height);

#if defined( _WIN32 )

extern  int   ( WINAPI * gwglChoosePixelFormat )(HDC, CONST PIXELFORMATDESCRIPTOR *);
extern  int   ( WINAPI * gwglDescribePixelFormat) (HDC, int, UINT, LPPIXELFORMATDESCRIPTOR);
extern  int   ( WINAPI * gwglGetPixelFormat)(HDC);
extern  BOOL  ( WINAPI * gwglSetPixelFormat)(HDC, int, CONST PIXELFORMATDESCRIPTOR *);
extern  BOOL  ( WINAPI * gwglSwapBuffers)(HDC);

extern	BOOL  ( WINAPI * gwglGetDeviceGammaRamp3DFX)( HDC, LPVOID );
extern	BOOL  ( WINAPI * gwglSetDeviceGammaRamp3DFX)( HDC, LPVOID );

extern BOOL  ( WINAPI * gwglCopyContext)(HGLRC, HGLRC, UINT);
extern HGLRC ( WINAPI * gwglCreateContext)(HDC);
extern HGLRC ( WINAPI * gwglCreateLayerContext)(HDC, int);
extern BOOL  ( WINAPI * gwglDeleteContext)(HGLRC);
extern HGLRC ( WINAPI * gwglGetCurrentContext)(VOID);
extern HDC   ( WINAPI * gwglGetCurrentDC)(VOID);
extern PROC  ( WINAPI * gwglGetProcAddress)(LPCSTR);
extern BOOL  ( WINAPI * gwglMakeCurrent)(HDC, HGLRC);
extern BOOL  ( WINAPI * gwglShareLists)(HGLRC, HGLRC);
extern BOOL  ( WINAPI * gwglUseFontBitmaps)(HDC, DWORD, DWORD, DWORD);

extern BOOL  ( WINAPI * gwglUseFontOutlines)(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);

extern BOOL ( WINAPI * gwglDescribeLayerPlane)(HDC, int, int, UINT,
                                            LPLAYERPLANEDESCRIPTOR);
extern int  ( WINAPI * gwglSetLayerPaletteEntries)(HDC, int, int, int,
                                                CONST COLORREF *);
extern int  ( WINAPI * gwglGetLayerPaletteEntries)(HDC, int, int, int,
                                                COLORREF *);
extern BOOL ( WINAPI * gwglRealizeLayerPalette)(HDC, int, BOOL);
extern BOOL ( WINAPI * gwglSwapLayerBuffers)(HDC, UINT);

extern BOOL ( WINAPI * gwglSwapIntervalEXT)( int interval );
extern int  ( WINAPI * gwglGetSwapIntervalEXT)( void );


#endif // _WIN32

extern void ( APIENTRY * gglActiveTextureARB )( GLenum );
extern void ( APIENTRY * gglMultiTexCoord2fARB )( GLenum, GLfloat, GLfloat );
extern void ( APIENTRY * gglActiveTexture )( GLenum );
extern void ( APIENTRY * gglMultiTexCoord2f )( GLenum, GLfloat, GLfloat );

#endif // __R_GGL_H__
